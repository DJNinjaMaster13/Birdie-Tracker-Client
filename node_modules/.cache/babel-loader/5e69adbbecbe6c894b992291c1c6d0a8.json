{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\djnin\\\\Web Dev Projects\\\\BirdieTracker2\\\\frontend\\\\src\\\\components\\\\edit-scorecards.component.js\";\nimport React, { Component } from 'react';\nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport axios from 'axios';\nimport { withAuth0 } from '@auth0/auth0-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EditScorecard extends Component {\n  constructor(props) {\n    super(props); //this.onChangeUsername = this.onChangeUsername.bind(this);\n\n    this.onChangeScores = idx => e => {\n      const newScores = this.state.scores.map((score, sidx) => {\n        if (idx !== sidx) return score;\n        return { ...score,\n          par: e.target.value\n        };\n      });\n      this.setState(state => ({ ...state,\n        scores: newScores\n      }), () => {//callback function to ensure state is updated before elements are rendered\n      });\n    };\n\n    this.onChangeCourse = this.onChangeCourse.bind(this);\n    this.onChangeDate = this.onChangeDate.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.updateScores = this.updateScores.bind(this);\n    this.onChangeScores = this.onChangeScores.bind(this);\n    this.state = {\n      username: '',\n      course: '',\n      score: 0,\n      par: 0,\n      scores: [],\n      date: new Date(),\n      users: [],\n      courses: []\n    };\n  }\n\n  componentDidMount() {\n    //load in scorecard data from selected scorecard\n    axios.get('http://localhost:5000/scorecards/' + this.props.match.params.id).then(response => {\n      this.setState({\n        username: response.data.username,\n        course: response.data.course,\n        score: response.data.score,\n        scores: response.data.scores,\n        date: new Date(response.data.date),\n        par: response.data.par\n      });\n    }).catch(function (error) {\n      console.log(error);\n    }); //load in user data for dropdown select\n    //axios.get('http://localhost:5000/users/')\n    //.then(response => {\n    //  if (response.data.length > 0) {\n    //    this.setState({\n    //      users: response.data.map(user => user.username)\n    //    })\n    //  }\n    //})\n    //load in course data for dropdown select\n\n    axios.get('http://localhost:5000/courses/').then(response => {\n      if (response.data.length > 0) {\n        this.setState(state => ({ ...state,\n          courses: response.data\n        }), () => {//callback function to ensure state is updated before elements are rendered\n        });\n      }\n    });\n  } //loops through the courses array to find the one the user selected\n  //then updates the state with the corresponding values for scores and par\n  //so that the form elements for the individual scores can be rendered\n\n\n  updateScores() {\n    //set the number of holes based on which course is selected\n    for (let i = 0; i < this.state.courses.length; i++) {\n      if (this.state.courses[i].name == this.state.course) {\n        this.setState(state => ({ ...state,\n          scores: this.state.courses[i].holes,\n          par: this.state.courses[i].par\n        }), () => {//callback function to ensure state is updated before elements are rendered\n        });\n      }\n    }\n  } //triggered by the user changing the score for an individual hole\n\n\n  //triggered by the user changing the username value in the select field\n  //onChangeUsername(e) {\n  //    this.setState({\n  //        username: e.target.value\n  //    })\n  //}\n  //triggered by the user changing the course in the select field\n  //calls updateScores() method to re-render the holes for the newly selected course\n  onChangeCourse(e) {\n    this.setState(state => ({ ...state,\n      course: e.target.value\n    }), () => {\n      this.updateScores();\n    });\n  } //triggered by the user changing the date value in the select field\n\n\n  onChangeDate(date) {\n    this.setState({\n      date: date\n    });\n  }\n\n  onSubmit(e) {\n    e.preventDefault(); //calculate the total score based on the individual holes\n\n    let temp = 0;\n\n    for (let i = 0; i < this.state.scores.length; i++) {\n      temp = temp + parseInt(this.state.scores[i].par);\n    } //set the score in the stat and wait to post the new\n    //scorecard until the state is updated by using\n    //callback function\n\n\n    this.setState(state => ({ ...state,\n      score: temp\n    }), () => {\n      const scorecard = {\n        username: this.state.username,\n        course: this.state.course,\n        score: this.state.score,\n        date: this.state.date,\n        scores: this.state.scores,\n        par: this.state.par\n      }; //save the updated scorecard to the database\n\n      axios.post('http://localhost:5000/scorecards/update/' + this.props.match.params.id, scorecard).then(res => console.log(res.data)).catch(error => {\n        console.log(error);\n      });\n    }); //redirect the user back to the scorecard list page\n\n    window.location = '/scorecardlist';\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Edit Scorecard Log\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.onSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Course: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            ref: \"userInput\",\n            required: true,\n            className: \"form-control\",\n            value: this.state.course,\n            onChange: this.onChangeCourse,\n            children: this.state.courses.map(function (course) {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: course.name,\n                children: course.name\n              }, course.name, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 30\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Date: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(DatePicker, {\n              selected: this.state.date,\n              onChange: this.onChangeDate\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 13\n        }, this), this.state.scores.map((score, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"score\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Hole \", idx + 1, \" score: \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: score.par,\n              onChange: this.onChangeScores(idx)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 21\n          }, this)]\n        }, score._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 17\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            value: \"Submit Changes\",\n            className: \"btn btn-primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }, this);\n  }\n\n} //export withAuth0 to allow use of user's username for the scorecard\n\n\nexport default _c = withAuth0(EditScorecard);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["C:/Users/djnin/Web Dev Projects/BirdieTracker2/frontend/src/components/edit-scorecards.component.js"],"names":["React","Component","DatePicker","axios","withAuth0","EditScorecard","constructor","props","onChangeScores","idx","e","newScores","state","scores","map","score","sidx","par","target","value","setState","onChangeCourse","bind","onChangeDate","onSubmit","updateScores","username","course","date","Date","users","courses","componentDidMount","get","match","params","id","then","response","data","catch","error","console","log","length","i","name","holes","preventDefault","temp","parseInt","scorecard","post","res","window","location","render","_id"],"mappings":"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","sourcesContent":["import React, { Component} from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport axios from 'axios';\r\nimport { withAuth0 } from '@auth0/auth0-react';\r\n\r\nclass EditScorecard extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        //this.onChangeUsername = this.onChangeUsername.bind(this);\r\n        this.onChangeCourse = this.onChangeCourse.bind(this);\r\n        this.onChangeDate = this.onChangeDate.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.updateScores = this.updateScores.bind(this);\r\n        this.onChangeScores = this.onChangeScores.bind(this);\r\n\r\n        this.state = {\r\n          username: '',\r\n          course: '',\r\n          score: 0,\r\n          par: 0,\r\n          scores: [],\r\n          date: new Date(),\r\n          users: [],\r\n          courses: [],\r\n        }\r\n    }\r\n    \r\n    componentDidMount() {\r\n\r\n      //load in scorecard data from selected scorecard\r\n        axios.get('http://localhost:5000/scorecards/'+this.props.match.params.id)\r\n        .then(response => {\r\n            this.setState({\r\n                username: response.data.username,\r\n                course: response.data.course,\r\n                score: response.data.score,\r\n                scores: response.data.scores,\r\n                date: new Date(response.data.date),\r\n                par: response.data.par,\r\n            })\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n        })\r\n\r\n        //load in user data for dropdown select\r\n        //axios.get('http://localhost:5000/users/')\r\n        //.then(response => {\r\n        //  if (response.data.length > 0) {\r\n        //    this.setState({\r\n        //      users: response.data.map(user => user.username)\r\n        //    })\r\n        //  }\r\n        //})\r\n\r\n        //load in course data for dropdown select\r\n        axios.get('http://localhost:5000/courses/')\r\n        .then(response => {\r\n          if (response.data.length > 0) {\r\n            this.setState(state => ({...state,\r\n              courses: response.data,\r\n            }), () => {\r\n              //callback function to ensure state is updated before elements are rendered\r\n            })\r\n          }\r\n        })\r\n\r\n    }\r\n\r\n\r\n    //loops through the courses array to find the one the user selected\r\n    //then updates the state with the corresponding values for scores and par\r\n    //so that the form elements for the individual scores can be rendered\r\n    updateScores() {\r\n      //set the number of holes based on which course is selected\r\n      for (let i = 0; i < this.state.courses.length; i++) {\r\n        if (this.state.courses[i].name == this.state.course) {\r\n          this.setState(state=> ({...state, \r\n            scores: this.state.courses[i].holes,\r\n            par: this.state.courses[i].par}), () => {\r\n            //callback function to ensure state is updated before elements are rendered\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    //triggered by the user changing the score for an individual hole\r\n    onChangeScores = idx => e => {\r\n      const newScores = this.state.scores.map((score, sidx) => {\r\n          if (idx !== sidx) return score;\r\n          return {...score, par: e.target.value };\r\n      });\r\n\r\n      this.setState(state => ({...state, scores: newScores}), () => {\r\n        //callback function to ensure state is updated before elements are rendered\r\n      });\r\n  }\r\n\r\n    //triggered by the user changing the username value in the select field\r\n    //onChangeUsername(e) {\r\n    //    this.setState({\r\n    //        username: e.target.value\r\n    //    })\r\n    //}\r\n\r\n    //triggered by the user changing the course in the select field\r\n    //calls updateScores() method to re-render the holes for the newly selected course\r\n    onChangeCourse(e) {\r\n      this.setState(state => ({...state, course: e.target.value}), () => {\r\n        this.updateScores();\r\n      })\r\n  }\r\n\r\n    //triggered by the user changing the date value in the select field\r\n    onChangeDate(date) {\r\n        this.setState({\r\n            date: date\r\n        })\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        //calculate the total score based on the individual holes\r\n        let temp = 0;\r\n        for (let i = 0; i < this.state.scores.length; i++) {\r\n          temp = temp + parseInt(this.state.scores[i].par);\r\n        }\r\n\r\n        //set the score in the stat and wait to post the new\r\n        //scorecard until the state is updated by using\r\n        //callback function\r\n        this.setState(state => ({...state, score: temp}), () => {\r\n        \r\n          const scorecard = {\r\n            username: this.state.username,\r\n            course: this.state.course,\r\n            score: this.state.score,\r\n            date: this.state.date,\r\n            scores: this.state.scores,\r\n            par: this.state.par\r\n          }\r\n\r\n          //save the updated scorecard to the database\r\n          axios.post('http://localhost:5000/scorecards/update/'+this.props.match.params.id, scorecard)\r\n          .then(res => console.log(res.data))\r\n          .catch((error) => {\r\n            console.log(error);\r\n          })\r\n        \r\n        })\r\n\r\n        //redirect the user back to the scorecard list page\r\n        window.location = '/scorecardlist';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div>\r\n          <h3>Edit Scorecard Log</h3>\r\n          <form onSubmit={this.onSubmit}>\r\n\r\n            <div className=\"form-group\"> \r\n              <label>Course: </label>\r\n              <select ref=\"userInput\"\r\n                  required\r\n                  className=\"form-control\"\r\n                  value={this.state.course}\r\n                  onChange={this.onChangeCourse}>\r\n                  {\r\n                    this.state.courses.map(function(course) {\r\n                      return <option \r\n                        key={course.name}\r\n                        value={course.name}>{course.name}\r\n                        </option>;\r\n                    })\r\n                  }\r\n              </select>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label>Date: </label>\r\n              <div>\r\n                <DatePicker\r\n                  selected={this.state.date}\r\n                  onChange={this.onChangeDate}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            {this.state.scores.map((score, idx) => (\r\n                <div className=\"score\" key={score._id}>\r\n                  <label>Hole {idx + 1} score: </label>\r\n                    <div>\r\n                      <input\r\n                          type=\"number\"\r\n                          value={score.par}\r\n                          onChange={this.onChangeScores(idx)}\r\n                      />\r\n                    </div>\r\n                </div>\r\n            ))}\r\n    \r\n            <div className=\"form-group\">\r\n              <input type=\"submit\" value=\"Submit Changes\" className=\"btn btn-primary\" />\r\n            </div>\r\n          </form>\r\n        </div>\r\n        )\r\n      }\r\n}\r\n\r\n//export withAuth0 to allow use of user's username for the scorecard\r\nexport default withAuth0(EditScorecard);"]},"metadata":{},"sourceType":"module"}