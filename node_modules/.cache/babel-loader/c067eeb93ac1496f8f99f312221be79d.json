{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\djnin\\\\Web Dev Projects\\\\BirdieTracker\\\\BirdieTracker\\\\frontend\\\\src\\\\components\\\\edit-scorecards.component.js\";\nimport React, { Component } from 'react';\nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class EditScorecard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onChangeScores = idx => e => {\n      const newScores = this.state.scores.map((score, sidx) => {\n        if (idx !== sidx) return score;\n        return { ...score,\n          par: e.target.value\n        };\n      });\n      this.setState({\n        scores: newScores\n      });\n    };\n\n    this.onChangeUsername = this.onChangeUsername.bind(this);\n    this.onChangeCourse = this.onChangeCourse.bind(this);\n    this.onChangeScore = this.onChangeScore.bind(this);\n    this.onChangeDate = this.onChangeDate.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.updateScores = this.updateScores.bind(this);\n    this.onChangeScores = this.onChangeScores.bind(this);\n    this.state = {\n      username: '',\n      course: '',\n      score: 0,\n      numHoles: 0,\n      scores: [],\n      date: new Date(),\n      users: [],\n      courses: []\n    };\n  } //\n\n\n  componentDidMount() {\n    //load in scorecard data from selected scorecard\n    axios.get('http://localhost:5000/scorecards/' + this.props.match.params.id).then(response => {\n      this.setState({\n        username: response.data.username,\n        course: response.data.course,\n        score: response.data.score,\n        scores: response.data.scores,\n        date: new Date(response.data.date)\n      });\n    }).catch(function (error) {\n      console.log(error);\n    }); //load in user data for dropdown select\n\n    axios.get('http://localhost:5000/users/').then(response => {\n      if (response.data.length > 0) {\n        this.setState({\n          users: response.data.map(user => user.username)\n        });\n      }\n    }); //load in course data for dropdown select\n\n    axios.get('http://localhost:5000/courses/').then(response => {\n      if (response.data.length > 0) {\n        this.setState(state => ({ ...state,\n          courses: response.data,\n          course: response.data[0].name,\n          numHoles: response.data[0].holes.length,\n          scores: response.data[0].holes\n        }), () => {//callback function to ensure state is updated before elements are rendered\n        });\n      }\n    });\n  } //loops through the courses array to find the one the user selected\n  //then updates the state with the corresponding values for numHoles\n  //as well as copying the holes array into the scores array\n  //so that the form elements for the individual scores can be rendered\n  //NOTE: numHoles doesn't really need to be updated, just used for testing purposes\n\n\n  updateScores() {\n    //set the number of holes based on which course is selected\n    for (let i = 0; i < this.state.courses.length; i++) {\n      if (this.state.courses[i].name == this.state.course) {\n        this.setState(state => ({ ...state,\n          numHoles: this.state.courses[i].holes.length,\n          scores: this.state.courses[i].holes\n        }), () => {\n          console.log('just changed numHoles to: ' + this.state.numHoles);\n          console.log('scores: ' + this.state.scores);\n        });\n      }\n    }\n  }\n\n  onChangeUsername(e) {\n    this.setState({\n      username: e.target.value\n    });\n  }\n\n  onChangeCourse(e) {\n    this.setState(state => ({ ...state,\n      course: e.target.value\n    }), () => {\n      console.log(this.state.course);\n      this.updateScores();\n    });\n  }\n\n  onChangeScore(e) {\n    this.setState({\n      score: e.target.value\n    });\n  }\n\n  onChangeDate(date) {\n    this.setState({\n      date: date\n    });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    const scorecard = {\n      username: this.state.username,\n      course: this.state.course,\n      score: this.state.score,\n      date: this.state.date,\n      scores: this.state.scores\n    };\n    console.log(scorecard);\n    axios.post('http://localhost:5000/scorecards/update/' + this.props.match.params.id, scorecard).then(res => console.log(res.data)).catch(error => {\n      console.log(error);\n    });\n    window.location = '/scorecardlist';\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Edit Scorecard Log\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.onSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Username: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            ref: \"userInput\",\n            required: true,\n            className: \"form-control\",\n            value: this.state.username,\n            onChange: this.onChangeUsername,\n            children: this.state.users.map(function (user) {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: user,\n                children: user\n              }, user, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 30\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Course: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            ref: \"userInput\",\n            required: true,\n            className: \"form-control\",\n            value: this.state.course,\n            onChange: this.onChangeCourse,\n            children: this.state.courses.map(function (course) {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: course.name,\n                children: course.name\n              }, course.name, false, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 30\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Score: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            value: this.state.score,\n            onChange: this.onChangeScore\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Date: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(DatePicker, {\n              selected: this.state.date,\n              onChange: this.onChangeDate\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 13\n        }, this), this.state.scores.map((score, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"score\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Hole \", idx + 1, \" score: \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: score.par,\n              onChange: this.onChangeScores(idx)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 21\n          }, this)]\n        }, score._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 17\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            value: \"Submit Changes\",\n            className: \"btn btn-primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/djnin/Web Dev Projects/BirdieTracker/BirdieTracker/frontend/src/components/edit-scorecards.component.js"],"names":["React","Component","DatePicker","axios","EditScorecard","constructor","props","onChangeScores","idx","e","newScores","state","scores","map","score","sidx","par","target","value","setState","onChangeUsername","bind","onChangeCourse","onChangeScore","onChangeDate","onSubmit","updateScores","username","course","numHoles","date","Date","users","courses","componentDidMount","get","match","params","id","then","response","data","catch","error","console","log","length","user","name","holes","i","preventDefault","scorecard","post","res","window","location","render","_id"],"mappings":"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","sourcesContent":["import React, { Component} from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport axios from 'axios';\r\n\r\nexport default class EditScorecard extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onChangeUsername = this.onChangeUsername.bind(this);\r\n        this.onChangeCourse = this.onChangeCourse.bind(this);\r\n        this.onChangeScore = this.onChangeScore.bind(this);\r\n        this.onChangeDate = this.onChangeDate.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.updateScores = this.updateScores.bind(this);\r\n        this.onChangeScores = this.onChangeScores.bind(this);\r\n\r\n        this.state = {\r\n            username: '',\r\n            course: '',\r\n            score: 0,\r\n            numHoles: 0,\r\n            scores: [],\r\n            date: new Date(),\r\n            users: [],\r\n            courses: []\r\n        }\r\n    }\r\n    //\r\n    componentDidMount() {\r\n\r\n      //load in scorecard data from selected scorecard\r\n        axios.get('http://localhost:5000/scorecards/'+this.props.match.params.id)\r\n        .then(response => {\r\n            this.setState({\r\n                username: response.data.username,\r\n                course: response.data.course,\r\n                score: response.data.score,\r\n                scores: response.data.scores,\r\n                date: new Date(response.data.date)\r\n            })\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n        })\r\n\r\n        //load in user data for dropdown select\r\n        axios.get('http://localhost:5000/users/')\r\n        .then(response => {\r\n          if (response.data.length > 0) {\r\n            this.setState({\r\n              users: response.data.map(user => user.username)\r\n            })\r\n          }\r\n        })\r\n\r\n        //load in course data for dropdown select\r\n        axios.get('http://localhost:5000/courses/')\r\n        .then(response => {\r\n          if (response.data.length > 0) {\r\n            this.setState(state => ({...state,\r\n              courses: response.data,\r\n              course: response.data[0].name,\r\n              numHoles: response.data[0].holes.length,\r\n              scores: response.data[0].holes\r\n            }), () => {\r\n              //callback function to ensure state is updated before elements are rendered\r\n            })\r\n          }\r\n        })\r\n    }\r\n\r\n\r\n    //loops through the courses array to find the one the user selected\r\n    //then updates the state with the corresponding values for numHoles\r\n    //as well as copying the holes array into the scores array\r\n    //so that the form elements for the individual scores can be rendered\r\n    //NOTE: numHoles doesn't really need to be updated, just used for testing purposes\r\n    updateScores() {\r\n      //set the number of holes based on which course is selected\r\n      for (let i = 0; i < this.state.courses.length; i++) {\r\n        if (this.state.courses[i].name == this.state.course) {\r\n          this.setState(state=> ({...state, numHoles: this.state.courses[i].holes.length, scores: this.state.courses[i].holes}), () => {\r\n            console.log('just changed numHoles to: ' + this.state.numHoles);\r\n            console.log('scores: ' + this.state.scores)\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    onChangeScores = idx => e => {\r\n      const newScores = this.state.scores.map((score, sidx) => {\r\n          if (idx !== sidx) return score;\r\n          return {...score, par: e.target.value };\r\n      });\r\n\r\n      this.setState({scores: newScores});\r\n  }\r\n\r\n    onChangeUsername(e) {\r\n        this.setState({\r\n            username: e.target.value\r\n        })\r\n    }\r\n\r\n    onChangeCourse(e) {\r\n      this.setState(state => ({...state, course: e.target.value}), () => {\r\n        console.log(this.state.course);\r\n        this.updateScores();\r\n      })\r\n  }\r\n\r\n    onChangeScore(e) {\r\n        this.setState({\r\n            score: e.target.value\r\n        })\r\n    }\r\n\r\n    onChangeDate(date) {\r\n        this.setState({\r\n            date: date\r\n        })\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        const scorecard = {\r\n            username: this.state.username,\r\n            course: this.state.course,\r\n            score: this.state.score,\r\n            date: this.state.date,\r\n            scores: this.state.scores\r\n        }\r\n\r\n        console.log(scorecard);\r\n\r\n        axios.post('http://localhost:5000/scorecards/update/'+this.props.match.params.id, scorecard)\r\n        .then(res => console.log(res.data))\r\n        .catch((error) => {\r\n          console.log(error);\r\n        })\r\n\r\n        window.location = '/scorecardlist';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div>\r\n          <h3>Edit Scorecard Log</h3>\r\n          <form onSubmit={this.onSubmit}>\r\n            <div className=\"form-group\"> \r\n              <label>Username: </label>\r\n              <select ref=\"userInput\"\r\n                  required\r\n                  className=\"form-control\"\r\n                  value={this.state.username}\r\n                  onChange={this.onChangeUsername}>\r\n                  {\r\n                    this.state.users.map(function(user) {\r\n                      return <option \r\n                        key={user}\r\n                        value={user}>{user}\r\n                        </option>;\r\n                    })\r\n                  }\r\n              </select>\r\n            </div>\r\n            <div>\r\n                \r\n            </div>\r\n\r\n            <div className=\"form-group\"> \r\n              <label>Course: </label>\r\n              <select ref=\"userInput\"\r\n                  required\r\n                  className=\"form-control\"\r\n                  value={this.state.course}\r\n                  onChange={this.onChangeCourse}>\r\n                  {\r\n                    this.state.courses.map(function(course) {\r\n                      return <option \r\n                        key={course.name}\r\n                        value={course.name}>{course.name}\r\n                        </option>;\r\n                    })\r\n                  }\r\n              </select>\r\n            </div>\r\n\r\n\r\n            <div className=\"form-group\">\r\n              <label>Score: </label>\r\n              <input \r\n                  type=\"text\" \r\n                  className=\"form-control\"\r\n                  value={this.state.score}\r\n                  onChange={this.onChangeScore}\r\n                  />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Date: </label>\r\n              <div>\r\n                <DatePicker\r\n                  selected={this.state.date}\r\n                  onChange={this.onChangeDate}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            {this.state.scores.map((score, idx) => (\r\n                <div className=\"score\" key={score._id}>\r\n                  <label>Hole {idx + 1} score: </label>\r\n                    <div>\r\n                      <input\r\n                          type=\"number\"\r\n                          value={score.par}\r\n                          onChange={this.onChangeScores(idx)}\r\n                      />\r\n                    </div>\r\n                </div>\r\n            ))}\r\n    \r\n            <div className=\"form-group\">\r\n              <input type=\"submit\" value=\"Submit Changes\" className=\"btn btn-primary\" />\r\n            </div>\r\n          </form>\r\n        </div>\r\n        )\r\n      }\r\n}"]},"metadata":{},"sourceType":"module"}