{"ast":null,"code":"import _slicedToArray from\"C:/Users/djnin/Web Dev Projects/BirdieTracker v3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import{useAuth0}from\"@auth0/auth0-react\";import LoginMessage from\"./login-message.component\";import axios from'axios';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Profile=function Profile(){var _useAuth=useAuth0(),isAuthenticated=_useAuth.isAuthenticated,user=_useAuth.user;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),matched=_useState2[0],setMatched=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),player=_useState4[0],setPlayer=_useState4[1];useEffect(function(){//need to find associated user object to be able to display user\n//profile information and statistics\nif(!matched&&isAuthenticated){var nickname=user.nickname;//load in user data \naxios.get('https://birdie-tracker.herokuapp.com/users/').then(function(response){var player_found=false;if(response.data.length>0){//search through the users and find the one associated with our logged in user\nfor(var i=0;i<response.data.length;i++){if(response.data[i].username==nickname){console.log(\"Player found in DB\");console.log(response.data[i]._id);//need this to edit the user later on\nplayer_found=true;setPlayer(response.data[i]);//save player object to state for later use\nbreak;}}//if we couldn't find the associated user, create a new user object\n//this object is associated with the user's authentication credentials\n//and will be used to store the user's statistics in the DB. \nif(!player_found){var _user={username:nickname,rounds_played:0,best_score:999,worst_score:-999};setPlayer(_user);axios.post('https://birdie-tracker.herokuapp.com/users/add',_user).then(function(res){return console.log(res.data);});player_found=true;}}//if no users exist, then go ahead and create a new user object\n//this object is associated with the user's authentication credentials\n//and will be used to store the user's statistics in the DB. \nelse{var _user2={username:nickname,rounds_played:0,best_score:999,worst_score:-999};setPlayer(_user2);axios.post('https://birdie-tracker.herokuapp.com/users/add',_user2).then(function(res){return console.log(res.data);});player_found=true;}setMatched(player_found);console.log(matched);});}});var resetStats=function resetStats(e){e.preventDefault();//can only update user statistics if a user account exists\nif(player!=0){//reset player stats\nvar _user3={username:player.username,rounds_played:0,best_score:999,worst_score:-999};console.log(_user3);//update the user object in the database\naxios.post('https://birdie-tracker.herokuapp.com/users/update/'+player._id,_user3).then(function(res){return console.log(res.data);}).catch(function(error){console.log(error);});//will need to set matched to false so that the page re-loads the user-object from DB with\n//the updated statistics\nsetMatched(false);}};if(isAuthenticated){var nickname=user.nickname,email=user.email;return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{className:\"profile_header\",children:/*#__PURE__*/_jsx(\"h2\",{children:\"Personal Information:\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"personal_info\",children:[/*#__PURE__*/_jsxs(\"h3\",{children:[\"Username: \",nickname]}),/*#__PURE__*/_jsxs(\"h3\",{children:[\"Email: \",email]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"profile_header\",children:/*#__PURE__*/_jsx(\"h2\",{children:\"Stats:\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"statistics\",children:[/*#__PURE__*/_jsxs(\"h3\",{children:[\"Rounds Played: \",player.rounds_played]}),/*#__PURE__*/_jsxs(\"h3\",{children:[\"Best Score: \",player.best_score]}),/*#__PURE__*/_jsxs(\"h3\",{children:[\"Worst Score: \",player.worst_score]}),/*#__PURE__*/_jsx(\"form\",{onSubmit:resetStats,children:/*#__PURE__*/_jsx(\"div\",{className:\"top_margin\",children:/*#__PURE__*/_jsx(\"input\",{type:\"submit\",value:\"Reset Player Stats\",className:\"btn btn-primary\"})})})]})]});}else{return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(LoginMessage,{})});}};export default Profile;","map":{"version":3,"sources":["C:/Users/djnin/Web Dev Projects/BirdieTracker v3/frontend/src/components/profile.component.js"],"names":["React","useState","useEffect","useAuth0","LoginMessage","axios","Profile","isAuthenticated","user","matched","setMatched","player","setPlayer","nickname","get","then","response","player_found","data","length","i","username","console","log","_id","rounds_played","best_score","worst_score","post","res","resetStats","e","preventDefault","catch","error","email"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\r\nimport {useAuth0} from \"@auth0/auth0-react\";\r\nimport LoginMessage from \"./login-message.component\";\r\nimport axios from 'axios';\r\n\r\nconst Profile = () => {\r\n    const {isAuthenticated, user} = useAuth0();\r\n    const [matched, setMatched] = useState(false);\r\n    const [player, setPlayer] = useState(0);\r\n\r\n    useEffect(() => {\r\n\r\n        //need to find associated user object to be able to display user\r\n        //profile information and statistics\r\n        if (!matched && isAuthenticated) {\r\n            const {nickname} = user;\r\n            //load in user data \r\n            axios.get('https://birdie-tracker.herokuapp.com/users/')\r\n            .then(response => {\r\n                let player_found = false;\r\n                if (response.data.length > 0) {\r\n\r\n                    //search through the users and find the one associated with our logged in user\r\n                    for (let i = 0; i < response.data.length; i++) {\r\n                        if (response.data[i].username == nickname) {\r\n                            console.log(\"Player found in DB\");\r\n                            console.log(response.data[i]._id); //need this to edit the user later on\r\n                            player_found = true;\r\n                            setPlayer(response.data[i]); //save player object to state for later use\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    //if we couldn't find the associated user, create a new user object\r\n                    //this object is associated with the user's authentication credentials\r\n                    //and will be used to store the user's statistics in the DB. \r\n                    if (!player_found) {\r\n                        const user = {\r\n                            username: nickname,\r\n                            rounds_played: 0,\r\n                            best_score: 999,\r\n                            worst_score: -999,\r\n                        }\r\n                        setPlayer(user);\r\n            \r\n                        axios.post('https://birdie-tracker.herokuapp.com/users/add', user)\r\n                        .then(res => console.log(res.data));\r\n                        player_found = true;\r\n                    }\r\n                }\r\n\r\n                //if no users exist, then go ahead and create a new user object\r\n                //this object is associated with the user's authentication credentials\r\n                //and will be used to store the user's statistics in the DB. \r\n                else {\r\n\r\n                    const user = {\r\n                    username: nickname,\r\n                    rounds_played: 0,\r\n                    best_score: 999,\r\n                    worst_score: -999,\r\n                    }\r\n                    setPlayer(user);\r\n        \r\n                    axios.post('https://birdie-tracker.herokuapp.com/users/add', user)\r\n                    .then(res => console.log(res.data));\r\n                    player_found = true;\r\n                }\r\n                setMatched(player_found);\r\n                console.log(matched);\r\n            })\r\n            \r\n        }\r\n\r\n    });\r\n\r\n    const resetStats = (e) => {\r\n        \r\n        e.preventDefault();\r\n\r\n        //can only update user statistics if a user account exists\r\n        if (player != 0) {\r\n\r\n            //reset player stats\r\n            const user = {\r\n              username: player.username,\r\n              rounds_played: 0,\r\n              best_score: 999,\r\n              worst_score: -999,\r\n            }\r\n            console.log(user);\r\n            \r\n            //update the user object in the database\r\n            axios.post('https://birdie-tracker.herokuapp.com/users/update/'+player._id, user)\r\n            .then(res => console.log(res.data))\r\n            .catch((error) => {\r\n              console.log(error);\r\n            })\r\n\r\n            //will need to set matched to false so that the page re-loads the user-object from DB with\r\n            //the updated statistics\r\n            setMatched(false);\r\n          }\r\n    }\r\n\r\n    if (isAuthenticated) {\r\n        const {nickname, email} = user;\r\n        \r\n        return (\r\n            <div>\r\n                <div className =\"profile_header\">\r\n                    <h2>Personal Information:</h2>\r\n                </div>\r\n\r\n                <div className = \"personal_info\">\r\n                    <h3>Username: {nickname}</h3>\r\n                    <h3>Email: {email}</h3>\r\n                </div>\r\n\r\n                <div className =\"profile_header\">\r\n                    <h2>Stats:</h2>\r\n                </div>\r\n\r\n                <div className = \"statistics\">\r\n                    <h3>Rounds Played: {player.rounds_played}</h3>\r\n                    <h3>Best Score: {player.best_score}</h3>\r\n                    <h3>Worst Score: {player.worst_score}</h3>\r\n\r\n                    <form onSubmit={resetStats}>\r\n                        <div className=\"top_margin\">\r\n                            <input type=\"submit\" value=\"Reset Player Stats\" className=\"btn btn-primary\"/>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n    else {\r\n        return (\r\n            <div>\r\n              <LoginMessage/>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n};\r\n\r\nexport default Profile;"]},"metadata":{},"sourceType":"module"}