{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\djnin\\\\Web Dev Projects\\\\BirdieTracker2\\\\frontend\\\\src\\\\components\\\\profile.component.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport LoginMessage from \"./login-message.component\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Profile = () => {\n  _s();\n\n  const {\n    isAuthenticated,\n    user\n  } = useAuth0();\n  const [matched, setMatched] = useState(false);\n  const [player, setPlayer] = useState(null);\n  const [player_rounds, setPlayer_rounds] = useState(0);\n  useEffect(() => {\n    if (!matched && isAuthenticated) {\n      const {\n        nickname\n      } = user; //load in user data \n\n      axios.get('http://localhost:5000/users/').then(response => {\n        let player_found = false;\n\n        if (response.data.length > 0) {\n          //search through the users and find the one associated with our logged in user\n          for (let i = 0; i < response.data.length; i++) {\n            if (response.data[i].username == nickname) {\n              console.log(\"Player found in DB\");\n              console.log(response.data[i]._id); //need this to edit the user later on\n\n              player_found = true;\n              setPlayer(response.data[i]); //save player object to state for later use\n\n              setPlayer_rounds(response.data[i].rounds_played);\n              break;\n            }\n          } //if we couldn't find the associated user, create a new user object\n          //this object is associated with the user's authentication credentials\n          //and will be used to store the user's statistics in the DB. \n\n\n          if (!player_found) {\n            const user = {\n              username: nickname,\n              rounds_played: 0\n            };\n            axios.post('http://localhost:5000/users/add', user).then(res => console.log(res.data));\n            player_found = true;\n          }\n        } //if no users exist, then go ahead and create a new user object\n        else {\n          const user = {\n            username: nickname,\n            rounds_played: 0\n          };\n          axios.post('http://localhost:5000/users/add', user).then(res => console.log(res.data));\n          player_found = true;\n        }\n\n        setMatched(player_found);\n        console.log(matched);\n      });\n    }\n  });\n\n  const onSubmit = e => {\n    /*\r\n    e.preventDefault();\r\n    //this code will only execute if the user is logged in AND the page has not\r\n    //yet identified the corresponding user object associated with the user\r\n    //IF the page has already identified the user, then we don't want to run this\r\n    //again for performance reasons. \r\n    if (!matched && isAuthenticated) {\r\n        const {nickname} = user;\r\n        //load in user data \r\n        axios.get('http://localhost:5000/users/')\r\n        .then(response => {\r\n            let player_found = false;\r\n            if (response.data.length > 0) {\r\n                  //search through the users and find the one associated with our logged in user\r\n                for (let i = 0; i < response.data.length; i++) {\r\n                    if (response.data[i].username == nickname) {\r\n                        console.log(\"Player found in DB\");\r\n                        console.log(response.data[i]._id); //need this to edit the user later on\r\n                        player_found = true;\r\n                        setPlayer(response.data[i]); //save player object to state for later use\r\n                        setPlayer_rounds(response.data[i].rounds_played);\r\n                        break;\r\n                    }\r\n                }\r\n                  //if we couldn't find the associated user, create a new user object\r\n                //this object is associated with the user's authentication credentials\r\n                //and will be used to store the user's statistics in the DB. \r\n                if (!player_found) {\r\n                    const user = {\r\n                        username: nickname,\r\n                        rounds_played: 0,\r\n                    }\r\n        \r\n                    axios.post('http://localhost:5000/users/add', user)\r\n                    .then(res => console.log(res.data));\r\n                    player_found = true;\r\n                }\r\n            }\r\n              //if no users exist, then go ahead and create a new user object\r\n            else {\r\n                const user = {\r\n                username: nickname,\r\n                rounds_played: 0,\r\n                }\r\n    \r\n                axios.post('http://localhost:5000/users/add', user)\r\n                .then(res => console.log(res.data));\r\n                player_found = true;\r\n            }\r\n            setMatched(player_found);\r\n            console.log(matched);\r\n        })\r\n        \r\n    }\r\n    */\n  };\n\n  if (isAuthenticated) {\n    const {\n      nickname,\n      email,\n      last_login\n    } = user;\n    const test = matched;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"debug\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profile_header\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Personal Information:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"personal_info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Username: \", nickname]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Email: \", email]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profile_header\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Stats:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"statistics\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Rounds Played: \", player_rounds]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Best Score: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Average Score: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Worst Score: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Birdie Percentage: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: onSubmit,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"top_margin\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"submit\",\n              value: \"Start Tracking Stats\",\n              className: \"btn btn-primary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this);\n  }\n  /*\r\n  <div className=\"row\">\r\n      <pre className=\"col-12 text-light bg-dark p-4\">\r\n          {JSON.stringify(user, null, 2)}\r\n      </pre>\r\n  </div>\r\n    */\n  else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(LoginMessage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(Profile, \"hyT8iv7avyAYuHKrrM6p5uez4ls=\", false, function () {\n  return [useAuth0];\n});\n\n_c = Profile;\nexport default Profile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"sources":["C:/Users/djnin/Web Dev Projects/BirdieTracker2/frontend/src/components/profile.component.js"],"names":["React","useState","useEffect","useAuth0","LoginMessage","axios","Profile","isAuthenticated","user","matched","setMatched","player","setPlayer","player_rounds","setPlayer_rounds","nickname","get","then","response","player_found","data","length","i","username","console","log","_id","rounds_played","post","res","onSubmit","e","email","last_login","test"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\r\nimport {useAuth0} from \"@auth0/auth0-react\";\r\nimport LoginMessage from \"./login-message.component\";\r\nimport axios from 'axios';\r\n\r\nconst Profile = () => {\r\n    const {isAuthenticated, user} = useAuth0();\r\n    const [matched, setMatched] = useState(false);\r\n    const [player, setPlayer] = useState(null);\r\n    const [player_rounds, setPlayer_rounds] = useState(0);\r\n\r\n    useEffect(() => {\r\n\r\n        if (!matched && isAuthenticated) {\r\n            const {nickname} = user;\r\n            //load in user data \r\n            axios.get('http://localhost:5000/users/')\r\n            .then(response => {\r\n                let player_found = false;\r\n                if (response.data.length > 0) {\r\n\r\n                    //search through the users and find the one associated with our logged in user\r\n                    for (let i = 0; i < response.data.length; i++) {\r\n                        if (response.data[i].username == nickname) {\r\n                            console.log(\"Player found in DB\");\r\n                            console.log(response.data[i]._id); //need this to edit the user later on\r\n                            player_found = true;\r\n                            setPlayer(response.data[i]); //save player object to state for later use\r\n                            setPlayer_rounds(response.data[i].rounds_played);\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    //if we couldn't find the associated user, create a new user object\r\n                    //this object is associated with the user's authentication credentials\r\n                    //and will be used to store the user's statistics in the DB. \r\n                    if (!player_found) {\r\n                        const user = {\r\n                            username: nickname,\r\n                            rounds_played: 0,\r\n                        }\r\n            \r\n                        axios.post('http://localhost:5000/users/add', user)\r\n                        .then(res => console.log(res.data));\r\n                        player_found = true;\r\n                    }\r\n                }\r\n\r\n                //if no users exist, then go ahead and create a new user object\r\n                else {\r\n                    const user = {\r\n                    username: nickname,\r\n                    rounds_played: 0,\r\n                    }\r\n        \r\n                    axios.post('http://localhost:5000/users/add', user)\r\n                    .then(res => console.log(res.data));\r\n                    player_found = true;\r\n                }\r\n                setMatched(player_found);\r\n                console.log(matched);\r\n            })\r\n            \r\n        }\r\n\r\n    });\r\n\r\n    const onSubmit = (e) => {\r\n        /*\r\n        e.preventDefault();\r\n        //this code will only execute if the user is logged in AND the page has not\r\n        //yet identified the corresponding user object associated with the user\r\n        //IF the page has already identified the user, then we don't want to run this\r\n        //again for performance reasons. \r\n        if (!matched && isAuthenticated) {\r\n            const {nickname} = user;\r\n            //load in user data \r\n            axios.get('http://localhost:5000/users/')\r\n            .then(response => {\r\n                let player_found = false;\r\n                if (response.data.length > 0) {\r\n\r\n                    //search through the users and find the one associated with our logged in user\r\n                    for (let i = 0; i < response.data.length; i++) {\r\n                        if (response.data[i].username == nickname) {\r\n                            console.log(\"Player found in DB\");\r\n                            console.log(response.data[i]._id); //need this to edit the user later on\r\n                            player_found = true;\r\n                            setPlayer(response.data[i]); //save player object to state for later use\r\n                            setPlayer_rounds(response.data[i].rounds_played);\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    //if we couldn't find the associated user, create a new user object\r\n                    //this object is associated with the user's authentication credentials\r\n                    //and will be used to store the user's statistics in the DB. \r\n                    if (!player_found) {\r\n                        const user = {\r\n                            username: nickname,\r\n                            rounds_played: 0,\r\n                        }\r\n            \r\n                        axios.post('http://localhost:5000/users/add', user)\r\n                        .then(res => console.log(res.data));\r\n                        player_found = true;\r\n                    }\r\n                }\r\n\r\n                //if no users exist, then go ahead and create a new user object\r\n                else {\r\n                    const user = {\r\n                    username: nickname,\r\n                    rounds_played: 0,\r\n                    }\r\n        \r\n                    axios.post('http://localhost:5000/users/add', user)\r\n                    .then(res => console.log(res.data));\r\n                    player_found = true;\r\n                }\r\n                setMatched(player_found);\r\n                console.log(matched);\r\n            })\r\n            \r\n        }\r\n        */\r\n    }\r\n\r\n    if (isAuthenticated) {\r\n        const {nickname, email, last_login} = user;\r\n\r\n        const test = matched;\r\n        \r\n        return (\r\n            <div className = \"debug\">\r\n                <div className =\"profile_header\">\r\n                    <h2>Personal Information:</h2>\r\n                </div>\r\n\r\n                <div className = \"personal_info\">\r\n                    <h3>Username: {nickname}</h3>\r\n                    <h3>Email: {email}</h3>\r\n                </div>\r\n\r\n                <div className =\"profile_header\">\r\n                    <h2>Stats:</h2>\r\n                </div>\r\n\r\n                <div className = \"statistics\">\r\n                    <h3>Rounds Played: {player_rounds}</h3>\r\n                    <h3>Best Score: </h3>\r\n                    <h3>Average Score: </h3>\r\n                    <h3>Worst Score: </h3>\r\n                    <h3>Birdie Percentage: </h3>\r\n\r\n                    <form onSubmit={onSubmit}>\r\n                        <div className=\"top_margin\">\r\n                            <input type=\"submit\" value=\"Start Tracking Stats\" className=\"btn btn-primary\"/>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /*\r\n    <div className=\"row\">\r\n        <pre className=\"col-12 text-light bg-dark p-4\">\r\n            {JSON.stringify(user, null, 2)}\r\n        </pre>\r\n    </div>\r\n\r\n    */\r\n\r\n    else {\r\n        return (\r\n            <div>\r\n              <LoginMessage/>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n};\r\n\r\nexport default Profile;"]},"metadata":{},"sourceType":"module"}