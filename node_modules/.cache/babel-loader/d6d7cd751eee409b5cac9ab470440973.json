{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\djnin\\\\Web Dev Projects\\\\BirdieTracker2\\\\frontend\\\\src\\\\components\\\\edit-scorecards.component.js\";\nimport React, { Component } from 'react';\nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport axios from 'axios';\nimport { withAuth0 } from '@auth0/auth0-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EditScorecard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onChangeScores = idx => e => {\n      const newScores = this.state.scores.map((score, sidx) => {\n        if (idx !== sidx) return score;\n        return { ...score,\n          par: e.target.value\n        };\n      });\n      this.setState(state => ({ ...state,\n        scores: newScores\n      }), () => {//callback function to ensure state is updated before elements are rendered\n      });\n    };\n\n    this.onChangeCourse = this.onChangeCourse.bind(this);\n    this.onChangeDate = this.onChangeDate.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.updateScores = this.updateScores.bind(this);\n    this.onChangeScores = this.onChangeScores.bind(this);\n    const {\n      isAuthenticated\n    } = this.props.auth0;\n    this.state = {\n      username: '',\n      course: '',\n      score: 0,\n      par: 0,\n      scores: [],\n      date: new Date(),\n      users: [],\n      courses: [],\n      isAuth: isAuthenticated,\n      userAccount: null\n    };\n  }\n\n  componentDidMount() {\n    //user must be logged in or else we will be adding blank user objects\n    if (this.state.isAuth) {\n      //load in user data \n      axios.get('http://localhost:5000/users/').then(response => {\n        if (response.data.length > 0) {\n          let matched = false; //search through the users and find the one associated with our logged in user\n\n          for (let i = 0; i < response.data.length; i++) {\n            if (response.data[i].username == this.state.username) {\n              console.log(\"Match found\"); //once correct user is found, save their info in the state to be used later\n              //when updating the user object. \n\n              this.setState(state => ({ ...state,\n                userAccount: response.data[i]\n              }));\n              matched = true;\n              break;\n            }\n          }\n        }\n      }); //load in scorecard data from selected scorecard\n\n      axios.get('http://localhost:5000/scorecards/' + this.props.match.params.id).then(response => {\n        this.setState({\n          username: response.data.username,\n          course: response.data.course,\n          score: response.data.score,\n          scores: response.data.scores,\n          date: new Date(response.data.date),\n          par: response.data.par\n        });\n      }).catch(function (error) {\n        console.log(error);\n      }); //load in course data for dropdown select\n\n      axios.get('http://localhost:5000/courses/').then(response => {\n        if (response.data.length > 0) {\n          this.setState(state => ({ ...state,\n            courses: response.data\n          }), () => {//callback function to ensure state is updated before elements are rendered\n          });\n        }\n      });\n    }\n  } //loops through the courses array to find the one the user selected\n  //then updates the state with the corresponding values for scores and par\n  //so that the form elements for the individual scores can be rendered\n\n\n  updateScores() {\n    //set the number of holes based on which course is selected\n    for (let i = 0; i < this.state.courses.length; i++) {\n      if (this.state.courses[i].name == this.state.course) {\n        this.setState(state => ({ ...state,\n          scores: this.state.courses[i].holes,\n          par: this.state.courses[i].par\n        }), () => {//callback function to ensure state is updated before elements are rendered\n        });\n      }\n    }\n  } //triggered by the user changing the score for an individual hole\n\n\n  //triggered by the user changing the course in the select field\n  //calls updateScores() method to re-render the holes for the newly selected course\n  onChangeCourse(e) {\n    this.setState(state => ({ ...state,\n      course: e.target.value\n    }), () => {\n      this.updateScores();\n    });\n  } //triggered by the user changing the date value in the select field\n\n\n  onChangeDate(date) {\n    this.setState({\n      date: date\n    });\n  }\n\n  onSubmit(e) {\n    e.preventDefault(); //calculate the total score based on the individual holes\n\n    let round_score = 0;\n\n    for (let i = 0; i < this.state.scores.length; i++) {\n      round_score = round_score + parseInt(this.state.scores[i].par);\n    } //set the score in the stat and wait to post the new\n    //scorecard until the state is updated by using\n    //callback function\n\n\n    this.setState(state => ({ ...state,\n      score: round_score\n    }), () => {\n      const scorecard = {\n        username: this.state.username,\n        course: this.state.course,\n        score: this.state.score,\n        date: this.state.date,\n        scores: this.state.scores,\n        par: this.state.par\n      }; //save the updated scorecard to the database\n\n      axios.post('http://localhost:5000/scorecards/update/' + this.props.match.params.id, scorecard).then(res => console.log(res.data)).catch(error => {\n        console.log(error);\n      });\n    }); //can only update user statistics if a user account exists\n\n    if (this.state.userAccount != null) {\n      let new_best = this.state.userAccount.best_score;\n      let new_worst = this.state.userAccount.worst_score;\n      let score = round_score - this.state.par;\n\n      if (score < this.state.userAccount.best_score) {\n        new_best = score;\n      }\n\n      if (score > this.state.userAccount.worst_score) {\n        new_worst = score;\n      }\n\n      const user = {\n        username: this.state.userAccount.username,\n        rounds_played: this.state.userAccount.rounds_played,\n        best_score: new_best,\n        worst_score: new_worst\n      };\n      console.log(user); //update the user object in the database\n\n      axios.post('http://localhost:5000/users/update/' + this.state.userAccount._id, user).then(res => console.log(res.data)).catch(error => {\n        console.log(error);\n      });\n    } //redirect the user back to the scorecard list page\n\n\n    window.location = '/scorecardlist';\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scorecard_elements\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profile_header\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Edit Scorecard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.onSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Course: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            ref: \"userInput\",\n            required: true,\n            className: \"form-control\",\n            value: this.state.course,\n            onChange: this.onChangeCourse,\n            children: this.state.courses.map(function (course) {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: course.name,\n                children: course.name\n              }, course.name, false, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 30\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Date: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(DatePicker, {\n              selected: this.state.date,\n              onChange: this.onChangeDate\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 13\n        }, this), this.state.scores.map((score, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"score\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Hole \", idx + 1, \" score: \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: score.par,\n              onChange: this.onChangeScores(idx)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 21\n          }, this)]\n        }, score._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 17\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            value: \"Submit Changes\",\n            className: \"btn btn-primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 11\n    }, this);\n  }\n\n} //export withAuth0 to allow use of user's username for the scorecard\n\n\nexport default _c = withAuth0(EditScorecard);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["C:/Users/djnin/Web Dev Projects/BirdieTracker2/frontend/src/components/edit-scorecards.component.js"],"names":["React","Component","DatePicker","axios","withAuth0","EditScorecard","constructor","props","onChangeScores","idx","e","newScores","state","scores","map","score","sidx","par","target","value","setState","onChangeCourse","bind","onChangeDate","onSubmit","updateScores","isAuthenticated","auth0","username","course","date","Date","users","courses","isAuth","userAccount","componentDidMount","get","then","response","data","length","matched","i","console","log","match","params","id","catch","error","name","holes","preventDefault","round_score","parseInt","scorecard","post","res","new_best","best_score","new_worst","worst_score","user","rounds_played","_id","window","location","render"],"mappings":"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","sourcesContent":["import React, { Component} from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport axios from 'axios';\r\nimport { withAuth0 } from '@auth0/auth0-react';\r\n\r\nclass EditScorecard extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onChangeCourse = this.onChangeCourse.bind(this);\r\n        this.onChangeDate = this.onChangeDate.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.updateScores = this.updateScores.bind(this);\r\n        this.onChangeScores = this.onChangeScores.bind(this);\r\n\r\n        const {isAuthenticated } = this.props.auth0;\r\n\r\n        this.state = {\r\n          username: '',\r\n          course: '',\r\n          score: 0,\r\n          par: 0,\r\n          scores: [],\r\n          date: new Date(),\r\n          users: [],\r\n          courses: [],\r\n          isAuth: isAuthenticated,\r\n          userAccount: null,\r\n        }\r\n    }\r\n    \r\n    componentDidMount() {\r\n\r\n      //user must be logged in or else we will be adding blank user objects\r\n      if (this.state.isAuth) {\r\n\r\n        //load in user data \r\n        axios.get('http://localhost:5000/users/')\r\n        .then(response => {\r\n          if (response.data.length > 0) {\r\n\r\n            let matched = false;\r\n            //search through the users and find the one associated with our logged in user\r\n            for (let i = 0; i < response.data.length; i++) {\r\n              if (response.data[i].username == this.state.username) {\r\n                  console.log(\"Match found\");\r\n\r\n                  //once correct user is found, save their info in the state to be used later\r\n                  //when updating the user object. \r\n                  this.setState(state => ({\r\n                    ...state,\r\n                    userAccount: response.data[i],\r\n                  }))\r\n                  matched = true;\r\n                  break;\r\n              }\r\n            }\r\n          }\r\n        })\r\n\r\n       //load in scorecard data from selected scorecard\r\n        axios.get('http://localhost:5000/scorecards/'+this.props.match.params.id)\r\n        .then(response => {\r\n            this.setState({\r\n                username: response.data.username,\r\n                course: response.data.course,\r\n                score: response.data.score,\r\n                scores: response.data.scores,\r\n                date: new Date(response.data.date),\r\n                par: response.data.par,\r\n            })\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n        })\r\n\r\n        //load in course data for dropdown select\r\n        axios.get('http://localhost:5000/courses/')\r\n        .then(response => {\r\n          if (response.data.length > 0) {\r\n            this.setState(state => ({...state,\r\n              courses: response.data,\r\n            }), () => {\r\n              //callback function to ensure state is updated before elements are rendered\r\n            })\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n\r\n    //loops through the courses array to find the one the user selected\r\n    //then updates the state with the corresponding values for scores and par\r\n    //so that the form elements for the individual scores can be rendered\r\n    updateScores() {\r\n      //set the number of holes based on which course is selected\r\n      for (let i = 0; i < this.state.courses.length; i++) {\r\n        if (this.state.courses[i].name == this.state.course) {\r\n          this.setState(state=> ({...state, \r\n            scores: this.state.courses[i].holes,\r\n            par: this.state.courses[i].par}), () => {\r\n            //callback function to ensure state is updated before elements are rendered\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    //triggered by the user changing the score for an individual hole\r\n    onChangeScores = idx => e => {\r\n      const newScores = this.state.scores.map((score, sidx) => {\r\n          if (idx !== sidx) return score;\r\n          return {...score, par: e.target.value };\r\n      });\r\n\r\n      this.setState(state => ({...state, scores: newScores}), () => {\r\n        //callback function to ensure state is updated before elements are rendered\r\n      });\r\n  }\r\n\r\n    //triggered by the user changing the course in the select field\r\n    //calls updateScores() method to re-render the holes for the newly selected course\r\n    onChangeCourse(e) {\r\n      this.setState(state => ({...state, course: e.target.value}), () => {\r\n        this.updateScores();\r\n      })\r\n  }\r\n\r\n    //triggered by the user changing the date value in the select field\r\n    onChangeDate(date) {\r\n        this.setState({\r\n            date: date\r\n        })\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        //calculate the total score based on the individual holes\r\n        let round_score = 0;\r\n        for (let i = 0; i < this.state.scores.length; i++) {\r\n          round_score = round_score + parseInt(this.state.scores[i].par);\r\n        }\r\n\r\n        //set the score in the stat and wait to post the new\r\n        //scorecard until the state is updated by using\r\n        //callback function\r\n        this.setState(state => ({...state, score: round_score}), () => {\r\n        \r\n          const scorecard = {\r\n            username: this.state.username,\r\n            course: this.state.course,\r\n            score: this.state.score,\r\n            date: this.state.date,\r\n            scores: this.state.scores,\r\n            par: this.state.par\r\n          }\r\n\r\n          //save the updated scorecard to the database\r\n          axios.post('http://localhost:5000/scorecards/update/'+this.props.match.params.id, scorecard)\r\n          .then(res => console.log(res.data))\r\n          .catch((error) => {\r\n            console.log(error);\r\n          })\r\n        \r\n        })\r\n\r\n        //can only update user statistics if a user account exists\r\n        if (this.state.userAccount != null) {\r\n\r\n          let new_best = this.state.userAccount.best_score;\r\n          let new_worst = this.state.userAccount.worst_score;\r\n          let score = round_score - this.state.par;\r\n          if ( score < this.state.userAccount.best_score) {\r\n            new_best = score;\r\n          }\r\n          if ( score > this.state.userAccount.worst_score) {\r\n            new_worst = score;\r\n          }\r\n          \r\n\r\n          const user = {\r\n            username: this.state.userAccount.username,\r\n            rounds_played: this.state.userAccount.rounds_played,\r\n            best_score: new_best,\r\n            worst_score: new_worst,\r\n          }\r\n  \r\n          console.log(user);\r\n          \r\n          //update the user object in the database\r\n          axios.post('http://localhost:5000/users/update/'+this.state.userAccount._id, user)\r\n          .then(res => console.log(res.data))\r\n          .catch((error) => {\r\n            console.log(error);\r\n          })\r\n\r\n        }\r\n\r\n        //redirect the user back to the scorecard list page\r\n        window.location = '/scorecardlist';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n          <div className = \"scorecard_elements\">\r\n\r\n          <div className =\"profile_header\">\r\n              <h3>Edit Scorecard</h3>\r\n          </div>\r\n\r\n          <form onSubmit={this.onSubmit}>\r\n\r\n            <div className=\"form-group\"> \r\n              <label>Course: </label>\r\n              <select ref=\"userInput\"\r\n                  required\r\n                  className=\"form-control\"\r\n                  value={this.state.course}\r\n                  onChange={this.onChangeCourse}>\r\n                  {\r\n                    this.state.courses.map(function(course) {\r\n                      return <option \r\n                        key={course.name}\r\n                        value={course.name}>{course.name}\r\n                        </option>;\r\n                    })\r\n                  }\r\n              </select>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label>Date: </label>\r\n              <div>\r\n                <DatePicker\r\n                  selected={this.state.date}\r\n                  onChange={this.onChangeDate}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            {this.state.scores.map((score, idx) => (\r\n                <div className=\"score\" key={score._id}>\r\n                  <label>Hole {idx + 1} score: </label>\r\n                    <div>\r\n                      <input\r\n                          type=\"number\"\r\n                          value={score.par}\r\n                          onChange={this.onChangeScores(idx)}\r\n                      />\r\n                    </div>\r\n                </div>\r\n            ))}\r\n    \r\n            <div className=\"form-group\">\r\n              <input type=\"submit\" value=\"Submit Changes\" className=\"btn btn-primary\" />\r\n            </div>\r\n          </form>\r\n        </div>\r\n        )\r\n      }\r\n}\r\n\r\n//export withAuth0 to allow use of user's username for the scorecard\r\nexport default withAuth0(EditScorecard);"]},"metadata":{},"sourceType":"module"}