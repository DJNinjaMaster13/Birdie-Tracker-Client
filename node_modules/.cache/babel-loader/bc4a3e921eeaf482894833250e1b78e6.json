{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\djnin\\\\Web Dev Projects\\\\BirdieTracker2\\\\frontend\\\\src\\\\components\\\\profile.component.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport LoginMessage from \"./login-message.component\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Profile = () => {\n  _s();\n\n  const {\n    isAuthenticated,\n    user\n  } = useAuth0();\n  const [matched, setMatched] = useState(false);\n  const [player, setPlayer] = useState(0);\n  useEffect(() => {\n    //need to find associated user object to be able to display user\n    //profile information and statistics\n    if (!matched && isAuthenticated) {\n      const {\n        nickname\n      } = user; //load in user data \n\n      axios.get('http://localhost:5000/users/').then(response => {\n        let player_found = false;\n\n        if (response.data.length > 0) {\n          //search through the users and find the one associated with our logged in user\n          for (let i = 0; i < response.data.length; i++) {\n            if (response.data[i].username == nickname) {\n              console.log(\"Player found in DB\");\n              console.log(response.data[i]._id); //need this to edit the user later on\n\n              player_found = true;\n              setPlayer(response.data[i]); //save player object to state for later use\n\n              break;\n            }\n          } //if we couldn't find the associated user, create a new user object\n          //this object is associated with the user's authentication credentials\n          //and will be used to store the user's statistics in the DB. \n\n\n          if (!player_found) {\n            const user = {\n              username: nickname,\n              rounds_played: 0,\n              best_score: 999,\n              worst_score: -999\n            };\n            setPlayer(user);\n            axios.post('http://localhost:5000/users/add', user).then(res => console.log(res.data));\n            player_found = true;\n          }\n        } //if no users exist, then go ahead and create a new user object\n        //this object is associated with the user's authentication credentials\n        //and will be used to store the user's statistics in the DB. \n        else {\n          const user = {\n            username: nickname,\n            rounds_played: 0,\n            best_score: 999,\n            worst_score: -999\n          };\n          setPlayer(user);\n          axios.post('http://localhost:5000/users/add', user).then(res => console.log(res.data));\n          player_found = true;\n        }\n\n        setMatched(player_found);\n        console.log(matched);\n      });\n    }\n  });\n\n  const resetStats = e => {\n    e.preventDefault(); //can only update user statistics if a user account exists\n\n    if (player != 0) {\n      //reset player stats\n      const user = {\n        username: player.username,\n        rounds_played: 0,\n        best_score: 999,\n        worst_score: -999\n      };\n      console.log(user); //update the user object in the database\n\n      axios.post('http://localhost:5000/users/update/' + player._id, user).then(res => console.log(res.data)).catch(error => {\n        console.log(error);\n      }); //will need to set matched to false so that the page re-loads the user-object from DB with\n      //the updated statistics\n\n      setMatched(false);\n    }\n  };\n\n  if (isAuthenticated) {\n    const {\n      nickname,\n      email,\n      last_login\n    } = user;\n    const test = matched;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"debug\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profile_header\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Personal Information:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"personal_info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Username: \", nickname]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Email: \", email]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profile_header\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Stats:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"statistics\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Rounds Played: \", player.rounds_played]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Best Score: \", player.best_score]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Worst Score: \", player.worst_score]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: resetStats,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"top_margin\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"submit\",\n              value: \"Reset Player Stats\",\n              className: \"btn btn-primary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(LoginMessage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(Profile, \"PKa3frsEtf34fIYBY5WrA1hKHNg=\", false, function () {\n  return [useAuth0];\n});\n\n_c = Profile;\nexport default Profile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"sources":["C:/Users/djnin/Web Dev Projects/BirdieTracker2/frontend/src/components/profile.component.js"],"names":["React","useState","useEffect","useAuth0","LoginMessage","axios","Profile","isAuthenticated","user","matched","setMatched","player","setPlayer","nickname","get","then","response","player_found","data","length","i","username","console","log","_id","rounds_played","best_score","worst_score","post","res","resetStats","e","preventDefault","catch","error","email","last_login","test"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\r\nimport {useAuth0} from \"@auth0/auth0-react\";\r\nimport LoginMessage from \"./login-message.component\";\r\nimport axios from 'axios';\r\n\r\nconst Profile = () => {\r\n    const {isAuthenticated, user} = useAuth0();\r\n    const [matched, setMatched] = useState(false);\r\n    const [player, setPlayer] = useState(0);\r\n\r\n    useEffect(() => {\r\n\r\n        //need to find associated user object to be able to display user\r\n        //profile information and statistics\r\n        if (!matched && isAuthenticated) {\r\n            const {nickname} = user;\r\n            //load in user data \r\n            axios.get('http://localhost:5000/users/')\r\n            .then(response => {\r\n                let player_found = false;\r\n                if (response.data.length > 0) {\r\n\r\n                    //search through the users and find the one associated with our logged in user\r\n                    for (let i = 0; i < response.data.length; i++) {\r\n                        if (response.data[i].username == nickname) {\r\n                            console.log(\"Player found in DB\");\r\n                            console.log(response.data[i]._id); //need this to edit the user later on\r\n                            player_found = true;\r\n                            setPlayer(response.data[i]); //save player object to state for later use\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    //if we couldn't find the associated user, create a new user object\r\n                    //this object is associated with the user's authentication credentials\r\n                    //and will be used to store the user's statistics in the DB. \r\n                    if (!player_found) {\r\n                        const user = {\r\n                            username: nickname,\r\n                            rounds_played: 0,\r\n                            best_score: 999,\r\n                            worst_score: -999,\r\n                        }\r\n                        setPlayer(user);\r\n            \r\n                        axios.post('http://localhost:5000/users/add', user)\r\n                        .then(res => console.log(res.data));\r\n                        player_found = true;\r\n                    }\r\n                }\r\n\r\n                //if no users exist, then go ahead and create a new user object\r\n                //this object is associated with the user's authentication credentials\r\n                //and will be used to store the user's statistics in the DB. \r\n                else {\r\n\r\n                    const user = {\r\n                    username: nickname,\r\n                    rounds_played: 0,\r\n                    best_score: 999,\r\n                    worst_score: -999,\r\n                    }\r\n                    setPlayer(user);\r\n        \r\n                    axios.post('http://localhost:5000/users/add', user)\r\n                    .then(res => console.log(res.data));\r\n                    player_found = true;\r\n                }\r\n                setMatched(player_found);\r\n                console.log(matched);\r\n            })\r\n            \r\n        }\r\n\r\n    });\r\n\r\n    const resetStats = (e) => {\r\n        \r\n        e.preventDefault();\r\n\r\n        //can only update user statistics if a user account exists\r\n        if (player != 0) {\r\n\r\n            //reset player stats\r\n            const user = {\r\n              username: player.username,\r\n              rounds_played: 0,\r\n              best_score: 999,\r\n              worst_score: -999,\r\n            }\r\n            console.log(user);\r\n            \r\n            //update the user object in the database\r\n            axios.post('http://localhost:5000/users/update/'+player._id, user)\r\n            .then(res => console.log(res.data))\r\n            .catch((error) => {\r\n              console.log(error);\r\n            })\r\n\r\n            //will need to set matched to false so that the page re-loads the user-object from DB with\r\n            //the updated statistics\r\n            setMatched(false);\r\n          }\r\n    }\r\n\r\n    if (isAuthenticated) {\r\n        const {nickname, email, last_login} = user;\r\n\r\n        const test = matched;\r\n        \r\n        return (\r\n            <div className = \"debug\">\r\n                <div className =\"profile_header\">\r\n                    <h2>Personal Information:</h2>\r\n                </div>\r\n\r\n                <div className = \"personal_info\">\r\n                    <h3>Username: {nickname}</h3>\r\n                    <h3>Email: {email}</h3>\r\n                </div>\r\n\r\n                <div className =\"profile_header\">\r\n                    <h2>Stats:</h2>\r\n                </div>\r\n\r\n                <div className = \"statistics\">\r\n                    <h3>Rounds Played: {player.rounds_played}</h3>\r\n                    <h3>Best Score: {player.best_score}</h3>\r\n                    <h3>Worst Score: {player.worst_score}</h3>\r\n\r\n                    <form onSubmit={resetStats}>\r\n                        <div className=\"top_margin\">\r\n                            <input type=\"submit\" value=\"Reset Player Stats\" className=\"btn btn-primary\"/>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n    else {\r\n        return (\r\n            <div>\r\n              <LoginMessage/>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n};\r\n\r\nexport default Profile;"]},"metadata":{},"sourceType":"module"}