{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\djnin\\\\Web Dev Projects\\\\BirdieTracker2\\\\frontend\\\\src\\\\components\\\\create-scorecard.component.js\";\nimport React, { Component } from 'react';\nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport axios from 'axios';\nimport { withAuth0 } from '@auth0/auth0-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CreateScorecard extends Component {\n  constructor(props) {\n    super(props); //this.onChangeUsername = this.onChangeUsername.bind(this);\n\n    this.onChangeScores = idx => e => {\n      const newScores = this.state.scores.map((score, sidx) => {\n        if (idx !== sidx) return score;\n        return { ...score,\n          par: e.target.value\n        };\n      });\n      this.setState(state => ({ ...state,\n        scores: newScores\n      }), () => {//callback function to ensure state is updated before elements are rendered\n      });\n    };\n\n    this.onChangeCourse = this.onChangeCourse.bind(this);\n    this.onChangeDate = this.onChangeDate.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.updateScores = this.updateScores.bind(this);\n    this.onChangeScores = this.onChangeScores.bind(this);\n    const {\n      user\n    } = this.props.auth0;\n    const {\n      nickname,\n      email\n    } = user;\n    this.state = {\n      username: nickname,\n      course: '',\n      score: 0,\n      par: 0,\n      scores: [],\n      date: new Date(),\n      users: [],\n      courses: []\n    };\n  }\n\n  componentDidMount() {\n    //load in user data for dropdown select\n    //axios.get('http://localhost:5000/users/')\n    //.then(response => {\n    //  if (response.data.length > 0) {\n    //    this.setState({\n    //      users: response.data.map(user => user.username),\n    //      username: response.data[0].username\n    //    })\n    //  }\n    //})\n    //load in course data for dropdown select\n    axios.get('http://localhost:5000/courses/').then(response => {\n      if (response.data.length > 0) {\n        this.setState(state => ({ ...state,\n          courses: response.data,\n          course: response.data[0].name,\n          scores: response.data[0].holes,\n          holes: response.data[0].holes,\n          par: response.data[0].par\n        }), () => {//callback function to ensure state is updated before elements are rendered\n        });\n      }\n    });\n  } //triggered by user changing the username value in the select field\n  //onChangeUsername(e) {\n  //    this.setState({\n  //        username: e.target.value\n  //    })\n  //}\n  //loops through the courses array to find the one the user selected\n  //then updates the state with the corresponding values for scores and par\n  //so that the form elements for the individual scores can be rendered\n\n\n  updateScores() {\n    //set the number of holes based on which course is selected\n    for (let i = 0; i < this.state.courses.length; i++) {\n      if (this.state.courses[i].name == this.state.course) {\n        this.setState(state => ({ ...state,\n          scores: this.state.courses[i].holes,\n          par: this.state.courses[i].par\n        }), () => {//callback function to ensure state is updated before elements are rendered\n        });\n      }\n    }\n  } //triggered by the user changing the score for an individual hole\n\n\n  //triggered by the user changing the course\n  //calls updateScores() function to re-render the holes for the newly selected course\n  onChangeCourse(e) {\n    this.setState(state => ({ ...state,\n      course: e.target.value\n    }), () => {\n      this.updateScores();\n    });\n  } //triggered by the user changing the date in the select field\n\n\n  onChangeDate(date) {\n    this.setState({\n      date: date\n    });\n  }\n\n  onSubmit(e) {\n    e.preventDefault(); //calculate the total score based on the individual holes\n\n    let temp = 0;\n\n    for (let i = 0; i < this.state.scores.length; i++) {\n      temp = temp + parseInt(this.state.scores[i].par);\n    } //set the score in the state and wait to post the new\n    //scorecard until the state is updated by using\n    //callback function\n\n\n    this.setState(state => ({ ...state,\n      score: temp\n    }), () => {\n      const scorecard = {\n        username: this.state.username,\n        course: this.state.course,\n        score: this.state.score,\n        date: this.state.date,\n        scores: this.state.scores,\n        par: this.state.par\n      };\n      axios.post('http://localhost:5000/scorecards/add', scorecard).then(res => console.log(res.data));\n    });\n    window.location = '/scorecardlist';\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"narrow_textbox\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Create New Scorecard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.onSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Course: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            ref: \"userInput\",\n            required: true,\n            className: \"form-control\",\n            value: this.state.course,\n            onChange: this.onChangeCourse,\n            children: this.state.courses.map(function (course) {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: course.name,\n                children: course.name\n              }, course.name, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 30\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Date: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(DatePicker, {\n              selected: this.state.date,\n              onChange: this.onChangeDate\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }, this), this.state.scores.map((score, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"score\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Hole \", idx + 1, \" score: \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: score.par,\n              onChange: this.onChangeScores(idx)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 21\n          }, this)]\n        }, score._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 17\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            value: \"Create Scorecard\",\n            className: \"btn btn-primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }, this);\n  }\n\n} //export withAuth0 to allow use of user's username for the scorecard\n\n\nexport default _c = withAuth0(CreateScorecard);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["C:/Users/djnin/Web Dev Projects/BirdieTracker2/frontend/src/components/create-scorecard.component.js"],"names":["React","Component","DatePicker","axios","withAuth0","CreateScorecard","constructor","props","onChangeScores","idx","e","newScores","state","scores","map","score","sidx","par","target","value","setState","onChangeCourse","bind","onChangeDate","onSubmit","updateScores","user","auth0","nickname","email","username","course","date","Date","users","courses","componentDidMount","get","then","response","data","length","name","holes","i","preventDefault","temp","parseInt","scorecard","post","res","console","log","window","location","render","_id"],"mappings":"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","sourcesContent":["import React, { Component} from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport axios from 'axios';\r\nimport { withAuth0 } from '@auth0/auth0-react';\r\n\r\nclass CreateScorecard extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        //this.onChangeUsername = this.onChangeUsername.bind(this);\r\n        this.onChangeCourse = this.onChangeCourse.bind(this);\r\n        this.onChangeDate = this.onChangeDate.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.updateScores = this.updateScores.bind(this);\r\n        this.onChangeScores = this.onChangeScores.bind(this);\r\n\r\n        const { user } = this.props.auth0;\r\n        const {nickname, email} = user;\r\n\r\n        this.state = {\r\n            username: nickname,\r\n            course: '',\r\n            score: 0,\r\n            par: 0,\r\n            scores: [],\r\n            date: new Date(),\r\n            users: [],\r\n            courses: [],\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        //load in user data for dropdown select\r\n        //axios.get('http://localhost:5000/users/')\r\n        //.then(response => {\r\n        //  if (response.data.length > 0) {\r\n        //    this.setState({\r\n        //      users: response.data.map(user => user.username),\r\n        //      username: response.data[0].username\r\n        //    })\r\n        //  }\r\n        //})\r\n\r\n        //load in course data for dropdown select\r\n        axios.get('http://localhost:5000/courses/')\r\n        .then(response => {\r\n          if (response.data.length > 0) {\r\n            this.setState(state => ({...state,\r\n              courses: response.data,\r\n              course: response.data[0].name,\r\n              scores: response.data[0].holes,\r\n              holes: response.data[0].holes,\r\n              par: response.data[0].par,\r\n            }), () => {\r\n              //callback function to ensure state is updated before elements are rendered\r\n            })\r\n          }\r\n        })\r\n    }\r\n\r\n    //triggered by user changing the username value in the select field\r\n    //onChangeUsername(e) {\r\n    //    this.setState({\r\n    //        username: e.target.value\r\n    //    })\r\n    //}\r\n\r\n    //loops through the courses array to find the one the user selected\r\n    //then updates the state with the corresponding values for scores and par\r\n    //so that the form elements for the individual scores can be rendered\r\n    updateScores() {\r\n      //set the number of holes based on which course is selected\r\n      for (let i = 0; i < this.state.courses.length; i++) {\r\n        if (this.state.courses[i].name == this.state.course) {\r\n          this.setState(state=> ({...state, \r\n            scores: this.state.courses[i].holes,\r\n            par: this.state.courses[i].par}), () => {\r\n            //callback function to ensure state is updated before elements are rendered\r\n\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    //triggered by the user changing the score for an individual hole\r\n    onChangeScores = idx => e => {\r\n      const newScores = this.state.scores.map((score, sidx) => {\r\n          if (idx !== sidx) return score;\r\n          return {...score, par: e.target.value };\r\n      });\r\n\r\n      this.setState(state => ({...state, scores: newScores}), () => {\r\n        //callback function to ensure state is updated before elements are rendered\r\n      });\r\n  }\r\n\r\n    //triggered by the user changing the course\r\n    //calls updateScores() function to re-render the holes for the newly selected course\r\n    onChangeCourse(e) {\r\n        this.setState(state => ({...state, course: e.target.value}), () => {\r\n          this.updateScores();\r\n        })\r\n    }\r\n\r\n    //triggered by the user changing the date in the select field\r\n    onChangeDate(date) {\r\n        this.setState({\r\n            date: date\r\n        })\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        //calculate the total score based on the individual holes\r\n        let temp = 0;\r\n        for (let i = 0; i < this.state.scores.length; i++) {\r\n          temp = temp + parseInt(this.state.scores[i].par);\r\n        }\r\n\r\n        //set the score in the state and wait to post the new\r\n        //scorecard until the state is updated by using\r\n        //callback function\r\n        this.setState(state => ({...state, score: temp}), () => {\r\n\r\n          const scorecard = {\r\n            username: this.state.username,\r\n            course: this.state.course,\r\n            score: this.state.score,\r\n            date: this.state.date,\r\n            scores: this.state.scores,\r\n            par: this.state.par\r\n          }\r\n\r\n          axios.post('http://localhost:5000/scorecards/add', scorecard)\r\n          .then(res => console.log(res.data));\r\n\r\n        })\r\n\r\n        window.location = '/scorecardlist';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div className = \"narrow_textbox\">\r\n          <h3>Create New Scorecard</h3>\r\n          <form onSubmit={this.onSubmit}>\r\n\r\n            <div className=\"form-group\"> \r\n              <label>Course: </label>\r\n              <select ref=\"userInput\"\r\n                  required\r\n                  className=\"form-control\"\r\n                  value={this.state.course}\r\n                  onChange={this.onChangeCourse}>\r\n                  {\r\n                    this.state.courses.map(function(course) {\r\n                      return <option \r\n                        key={course.name}\r\n                        value={course.name}>{course.name}\r\n                        </option>;\r\n                    })\r\n                  }\r\n              </select>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label>Date: </label>\r\n              <div>\r\n                <DatePicker\r\n                  selected={this.state.date}\r\n                  onChange={this.onChangeDate}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            {this.state.scores.map((score, idx) => (\r\n                <div className=\"score\" key={score._id}>\r\n                  <label>Hole {idx + 1} score: </label>\r\n                    <div>\r\n                      <input\r\n                          type=\"number\"\r\n                          value={score.par}\r\n                          onChange={this.onChangeScores(idx)}\r\n                      />\r\n                    </div>\r\n                </div>\r\n            ))}\r\n    \r\n            <div className=\"form-group\">\r\n              <input type=\"submit\" value=\"Create Scorecard\" className=\"btn btn-primary\" />\r\n            </div>\r\n          </form>\r\n\r\n        </div>\r\n        )\r\n      }\r\n}\r\n\r\n//export withAuth0 to allow use of user's username for the scorecard\r\nexport default withAuth0(CreateScorecard);"]},"metadata":{},"sourceType":"module"}