{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\djnin\\\\Web Dev Projects\\\\BirdieTracker2\\\\frontend\\\\src\\\\components\\\\create-scorecard.component.js\";\nimport React, { Component } from 'react';\nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport axios from 'axios';\nimport { withAuth0 } from '@auth0/auth0-react';\nimport LoginMessage from \"./login-message.component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CreateScorecard extends Component {\n  constructor(props) {\n    super(props); //this.onChangeUsername = this.onChangeUsername.bind(this);\n\n    this.onChangeScores = idx => e => {\n      const newScores = this.state.scores.map((score, sidx) => {\n        if (idx !== sidx) return score;\n        return { ...score,\n          par: e.target.value\n        };\n      });\n      this.setState(state => ({ ...state,\n        scores: newScores\n      }), () => {//callback function to ensure state is updated before elements are rendered\n      });\n    };\n\n    this.onChangeCourse = this.onChangeCourse.bind(this);\n    this.onChangeDate = this.onChangeDate.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.updateScores = this.updateScores.bind(this);\n    this.onChangeScores = this.onChangeScores.bind(this);\n    const {\n      isAuthenticated\n    } = this.props.auth0;\n\n    if (isAuthenticated) {\n      const {\n        user\n      } = this.props.auth0;\n      const {\n        nickname,\n        email\n      } = user;\n      this.state = {\n        username: nickname,\n        course: '',\n        score: 0,\n        par: 0,\n        scores: [],\n        date: new Date(),\n        users: [],\n        courses: [],\n        isAuth: isAuthenticated,\n        userID: 0,\n        numRounds: 0\n      };\n    } else {\n      this.state = {\n        username: '',\n        course: '',\n        score: 0,\n        par: 0,\n        scores: [],\n        date: new Date(),\n        users: [],\n        courses: [],\n        isAuth: false,\n        userID: 0,\n        numRounds: 0\n      };\n    }\n  }\n\n  componentDidMount() {\n    //user must be logged in or else we will be adding blank user objects\n    if (this.state.isAuth) {\n      //load in user data \n      axios.get('http://localhost:5000/users/').then(response => {\n        if (response.data.length > 0) {\n          let matched = false; //search through the users and find the one associated with our logged in user\n\n          for (let i = 0; i < response.data.length; i++) {\n            if (response.data[i].username == this.state.username) {\n              console.log(\"Match found\");\n              this.setState(state => ({ ...state,\n                userID: response.data[i]._id\n              }));\n              matched = true;\n              break;\n            }\n          }\n        }\n      }); //load in course data for dropdown select\n\n      axios.get('http://localhost:5000/courses/').then(response => {\n        if (response.data.length > 0) {\n          this.setState(state => ({ ...state,\n            courses: response.data,\n            course: response.data[0].name,\n            scores: response.data[0].holes,\n            holes: response.data[0].holes,\n            par: response.data[0].par\n          }), () => {//callback function to ensure state is updated before elements are rendered\n          });\n        }\n      });\n    }\n  } //triggered by user changing the username value in the select field\n  //onChangeUsername(e) {\n  //    this.setState({\n  //        username: e.target.value\n  //    })\n  //}\n  //loops through the courses array to find the one the user selected\n  //then updates the state with the corresponding values for scores and par\n  //so that the form elements for the individual scores can be rendered\n\n\n  updateScores() {\n    //set the number of holes based on which course is selected\n    for (let i = 0; i < this.state.courses.length; i++) {\n      if (this.state.courses[i].name == this.state.course) {\n        this.setState(state => ({ ...state,\n          scores: this.state.courses[i].holes,\n          par: this.state.courses[i].par\n        }), () => {//callback function to ensure state is updated before elements are rendered\n        });\n      }\n    }\n  } //triggered by the user changing the score for an individual hole\n\n\n  //triggered by the user changing the course\n  //calls updateScores() function to re-render the holes for the newly selected course\n  onChangeCourse(e) {\n    this.setState(state => ({ ...state,\n      course: e.target.value\n    }), () => {\n      this.updateScores();\n    });\n  } //triggered by the user changing the date in the select field\n\n\n  onChangeDate(date) {\n    this.setState({\n      date: date\n    });\n  }\n\n  onSubmit(e) {\n    e.preventDefault(); //calculate the total score based on the individual holes\n\n    let temp = 0;\n\n    for (let i = 0; i < this.state.scores.length; i++) {\n      temp = temp + parseInt(this.state.scores[i].par);\n    } //set the score in the state and wait to post the new\n    //scorecard until the state is updated by using\n    //callback function\n\n\n    this.setState(state => ({ ...state,\n      score: temp\n    }), () => {\n      const scorecard = {\n        username: this.state.username,\n        course: this.state.course,\n        score: this.state.score,\n        date: this.state.date,\n        scores: this.state.scores,\n        par: this.state.par\n      };\n      axios.post('http://localhost:5000/scorecards/add', scorecard).then(res => console.log(res.data));\n    });\n    window.location = '/scorecardlist';\n  }\n\n  render() {\n    if (!this.state.isAuth) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(LoginMessage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 13\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scorecard_elements\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Create New Scorecard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.onSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Course: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            ref: \"userInput\",\n            required: true,\n            className: \"form-control\",\n            value: this.state.course,\n            onChange: this.onChangeCourse,\n            children: this.state.courses.map(function (course) {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: course.name,\n                children: course.name\n              }, course.name, false, {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 30\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Date: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(DatePicker, {\n              selected: this.state.date,\n              onChange: this.onChangeDate\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"score_boxes\",\n          children: this.state.scores.map((score, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"score\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Hole \", idx + 1, \" score: \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                value: score.par,\n                onChange: this.onChangeScores(idx)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 23\n            }, this)]\n          }, score._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            value: \"Create Scorecard\",\n            className: \"btn btn-primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }, this);\n  }\n\n} //export withAuth0 to allow use of user's username for the scorecard\n\n\nexport default _c = withAuth0(CreateScorecard);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["C:/Users/djnin/Web Dev Projects/BirdieTracker2/frontend/src/components/create-scorecard.component.js"],"names":["React","Component","DatePicker","axios","withAuth0","LoginMessage","CreateScorecard","constructor","props","onChangeScores","idx","e","newScores","state","scores","map","score","sidx","par","target","value","setState","onChangeCourse","bind","onChangeDate","onSubmit","updateScores","isAuthenticated","auth0","user","nickname","email","username","course","date","Date","users","courses","isAuth","userID","numRounds","componentDidMount","get","then","response","data","length","matched","i","console","log","_id","name","holes","preventDefault","temp","parseInt","scorecard","post","res","window","location","render"],"mappings":"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","sourcesContent":["import React, { Component} from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport axios from 'axios';\r\nimport { withAuth0 } from '@auth0/auth0-react';\r\nimport LoginMessage from \"./login-message.component\";\r\n\r\nclass CreateScorecard extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        //this.onChangeUsername = this.onChangeUsername.bind(this);\r\n        this.onChangeCourse = this.onChangeCourse.bind(this);\r\n        this.onChangeDate = this.onChangeDate.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.updateScores = this.updateScores.bind(this);\r\n        this.onChangeScores = this.onChangeScores.bind(this);\r\n\r\n        const {isAuthenticated } = this.props.auth0;\r\n\r\n        if (isAuthenticated) {\r\n          const { user } = this.props.auth0;\r\n          const {nickname, email} = user;\r\n          this.state = {\r\n            username: nickname,\r\n            course: '',\r\n            score: 0,\r\n            par: 0,\r\n            scores: [],\r\n            date: new Date(),\r\n            users: [],\r\n            courses: [],\r\n            isAuth: isAuthenticated,\r\n            userID: 0,\r\n            numRounds: 0,\r\n          }\r\n        }\r\n\r\n        else {\r\n          this.state = {\r\n            username: '',\r\n            course: '',\r\n            score: 0,\r\n            par: 0,\r\n            scores: [],\r\n            date: new Date(),\r\n            users: [],\r\n            courses: [],\r\n            isAuth: false,\r\n            userID: 0,\r\n            numRounds: 0,\r\n        }\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n      //user must be logged in or else we will be adding blank user objects\r\n      if (this.state.isAuth) {\r\n\r\n        //load in user data \r\n        axios.get('http://localhost:5000/users/')\r\n        .then(response => {\r\n          if (response.data.length > 0) {\r\n\r\n            let matched = false;\r\n            //search through the users and find the one associated with our logged in user\r\n            for (let i = 0; i < response.data.length; i++) {\r\n              if (response.data[i].username == this.state.username) {\r\n                  console.log(\"Match found\");\r\n                  this.setState(state => ({\r\n                    ...state,\r\n                    userID: response.data[i]._id,\r\n                  }))\r\n                  matched = true;\r\n                  break;\r\n              }\r\n            }\r\n          }\r\n        })\r\n\r\n        //load in course data for dropdown select\r\n        axios.get('http://localhost:5000/courses/')\r\n        .then(response => {\r\n          if (response.data.length > 0) {\r\n            this.setState(state => ({...state,\r\n              courses: response.data,\r\n              course: response.data[0].name,\r\n              scores: response.data[0].holes,\r\n              holes: response.data[0].holes,\r\n              par: response.data[0].par,\r\n            }), () => {\r\n              //callback function to ensure state is updated before elements are rendered\r\n            })\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n    //triggered by user changing the username value in the select field\r\n    //onChangeUsername(e) {\r\n    //    this.setState({\r\n    //        username: e.target.value\r\n    //    })\r\n    //}\r\n\r\n    //loops through the courses array to find the one the user selected\r\n    //then updates the state with the corresponding values for scores and par\r\n    //so that the form elements for the individual scores can be rendered\r\n    updateScores() {\r\n      //set the number of holes based on which course is selected\r\n      for (let i = 0; i < this.state.courses.length; i++) {\r\n        if (this.state.courses[i].name == this.state.course) {\r\n          this.setState(state=> ({...state, \r\n            scores: this.state.courses[i].holes,\r\n            par: this.state.courses[i].par}), () => {\r\n            //callback function to ensure state is updated before elements are rendered\r\n\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    //triggered by the user changing the score for an individual hole\r\n    onChangeScores = idx => e => {\r\n      const newScores = this.state.scores.map((score, sidx) => {\r\n          if (idx !== sidx) return score;\r\n          return {...score, par: e.target.value };\r\n      });\r\n\r\n      this.setState(state => ({...state, scores: newScores}), () => {\r\n        //callback function to ensure state is updated before elements are rendered\r\n      });\r\n  }\r\n\r\n    //triggered by the user changing the course\r\n    //calls updateScores() function to re-render the holes for the newly selected course\r\n    onChangeCourse(e) {\r\n        this.setState(state => ({...state, course: e.target.value}), () => {\r\n          this.updateScores();\r\n        })\r\n    }\r\n\r\n    //triggered by the user changing the date in the select field\r\n    onChangeDate(date) {\r\n        this.setState({\r\n            date: date\r\n        })\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        //calculate the total score based on the individual holes\r\n        let temp = 0;\r\n        for (let i = 0; i < this.state.scores.length; i++) {\r\n          temp = temp + parseInt(this.state.scores[i].par);\r\n        }\r\n\r\n        //set the score in the state and wait to post the new\r\n        //scorecard until the state is updated by using\r\n        //callback function\r\n        this.setState(state => ({...state, score: temp}), () => {\r\n\r\n          const scorecard = {\r\n            username: this.state.username,\r\n            course: this.state.course,\r\n            score: this.state.score,\r\n            date: this.state.date,\r\n            scores: this.state.scores,\r\n            par: this.state.par\r\n          }\r\n\r\n          axios.post('http://localhost:5000/scorecards/add', scorecard)\r\n          .then(res => console.log(res.data));\r\n\r\n        })\r\n\r\n        window.location = '/scorecardlist';\r\n    }\r\n\r\n    render() {\r\n\r\n      if (!this.state.isAuth) { \r\n        return (\r\n            <div>\r\n              <LoginMessage/>\r\n            </div>\r\n        )\r\n      }\r\n\r\n        return (\r\n        <div className = \"scorecard_elements\">\r\n          <h3>Create New Scorecard</h3>\r\n          <form onSubmit={this.onSubmit}>\r\n\r\n            <div className=\"form-group\"> \r\n              <label>Course: </label>\r\n              <select ref=\"userInput\"\r\n                  required\r\n                  className=\"form-control\"\r\n                  value={this.state.course}\r\n                  onChange={this.onChangeCourse}>\r\n                  {\r\n                    this.state.courses.map(function(course) {\r\n                      return <option \r\n                        key={course.name}\r\n                        value={course.name}>{course.name}\r\n                        </option>;\r\n                    })\r\n                  }\r\n              </select>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label>Date: </label>\r\n              <div>\r\n                <DatePicker\r\n                  selected={this.state.date}\r\n                  onChange={this.onChangeDate}\r\n                />\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"score_boxes\">\r\n              {this.state.scores.map((score, idx) => (\r\n                  <div className=\"score\" key={score._id}>\r\n                    <label>Hole {idx + 1} score: </label>\r\n                      <div>\r\n                        <input\r\n                            type=\"number\"\r\n                            value={score.par}\r\n                            onChange={this.onChangeScores(idx)}\r\n                        />\r\n                      </div>\r\n                  </div>\r\n              ))}\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <input type=\"submit\" value=\"Create Scorecard\" className=\"btn btn-primary\" />\r\n            </div>\r\n          </form>\r\n\r\n        </div>\r\n        )\r\n      }\r\n}\r\n\r\n//export withAuth0 to allow use of user's username for the scorecard\r\nexport default withAuth0(CreateScorecard);"]},"metadata":{},"sourceType":"module"}