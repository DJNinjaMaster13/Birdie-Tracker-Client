{"ast":null,"code":"import _objectSpread from\"C:/Users/djnin/Web Dev Projects/BirdieTracker v3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"C:/Users/djnin/Web Dev Projects/BirdieTracker v3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/Users/djnin/Web Dev Projects/BirdieTracker v3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"C:/Users/djnin/Web Dev Projects/BirdieTracker v3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"C:/Users/djnin/Web Dev Projects/BirdieTracker v3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"C:/Users/djnin/Web Dev Projects/BirdieTracker v3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import DatePicker from'react-datepicker';import\"react-datepicker/dist/react-datepicker.css\";import axios from'axios';import{withAuth0}from'@auth0/auth0-react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var EditScorecard=/*#__PURE__*/function(_Component){_inherits(EditScorecard,_Component);var _super=_createSuper(EditScorecard);function EditScorecard(props){var _this;_classCallCheck(this,EditScorecard);_this=_super.call(this,props);_this.onChangeScores=function(idx){return function(e){var newScores=_this.state.scores.map(function(score,sidx){if(idx!==sidx)return score;return _objectSpread(_objectSpread({},score),{},{par:e.target.value});});_this.setState(function(state){return _objectSpread(_objectSpread({},state),{},{scores:newScores});},function(){//callback function to ensure state is updated before elements are rendered\n});};};_this.onChangeCourse=_this.onChangeCourse.bind(_assertThisInitialized(_this));_this.onChangeDate=_this.onChangeDate.bind(_assertThisInitialized(_this));_this.onSubmit=_this.onSubmit.bind(_assertThisInitialized(_this));_this.updateScores=_this.updateScores.bind(_assertThisInitialized(_this));_this.onChangeScores=_this.onChangeScores.bind(_assertThisInitialized(_this));var isAuthenticated=_this.props.auth0.isAuthenticated;_this.state={username:'',course:'',score:0,par:0,scores:[],date:new Date(),users:[],courses:[],isAuth:isAuthenticated,userAccount:null};return _this;}_createClass(EditScorecard,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;//user must be logged in or else we will be adding blank user objects\nif(this.state.isAuth){//load in user data \naxios.get('https://birdie-tracker.herokuapp.com/users/').then(function(response){if(response.data.length>0){var matched=false;//search through the users and find the one associated with our logged in user\nvar _loop=function _loop(i){if(response.data[i].username==_this2.state.username){console.log(\"Match found\");//once correct user is found, save their info in the state to be used later\n//when updating the user object. \n_this2.setState(function(state){return _objectSpread(_objectSpread({},state),{},{userAccount:response.data[i]});});matched=true;return\"break\";}};for(var i=0;i<response.data.length;i++){var _ret=_loop(i);if(_ret===\"break\")break;}}});//load in scorecard data from selected scorecard\naxios.get('https://birdie-tracker.herokuapp.com/scorecards/'+this.props.match.params.id).then(function(response){_this2.setState({username:response.data.username,course:response.data.course,score:response.data.score,scores:response.data.scores,date:new Date(response.data.date),par:response.data.par});}).catch(function(error){console.log(error);});//load in course data for dropdown select\naxios.get('https://birdie-tracker.herokuapp.com/courses/').then(function(response){if(response.data.length>0){_this2.setState(function(state){return _objectSpread(_objectSpread({},state),{},{courses:response.data});},function(){//callback function to ensure state is updated before elements are rendered\n});}});}}//loops through the courses array to find the one the user selected\n//then updates the state with the corresponding values for scores and par\n//so that the form elements for the individual scores can be rendered\n},{key:\"updateScores\",value:function updateScores(){var _this3=this;var _loop2=function _loop2(i){if(_this3.state.courses[i].name==_this3.state.course){_this3.setState(function(state){return _objectSpread(_objectSpread({},state),{},{scores:_this3.state.courses[i].holes,par:_this3.state.courses[i].par});},function(){//callback function to ensure state is updated before elements are rendered\n});}};//set the number of holes based on which course is selected\nfor(var i=0;i<this.state.courses.length;i++){_loop2(i);}}//triggered by the user changing the score for an individual hole\n},{key:\"onChangeCourse\",value://triggered by the user changing the course in the select field\n//calls updateScores() method to re-render the holes for the newly selected course\nfunction onChangeCourse(e){var _this4=this;this.setState(function(state){return _objectSpread(_objectSpread({},state),{},{course:e.target.value});},function(){_this4.updateScores();});}//triggered by the user changing the date value in the select field\n},{key:\"onChangeDate\",value:function onChangeDate(date){this.setState({date:date});}},{key:\"onSubmit\",value:function onSubmit(e){var _this5=this;e.preventDefault();//calculate the total score based on the individual holes\nvar round_score=0;for(var i=0;i<this.state.scores.length;i++){round_score=round_score+parseInt(this.state.scores[i].par);}//set the score in the stat and wait to post the new\n//scorecard until the state is updated by using\n//callback function\nthis.setState(function(state){return _objectSpread(_objectSpread({},state),{},{score:round_score});},function(){var scorecard={username:_this5.state.username,course:_this5.state.course,score:_this5.state.score,date:_this5.state.date,scores:_this5.state.scores,par:_this5.state.par};//save the updated scorecard to the database\naxios.post('https://birdie-tracker.herokuapp.com/scorecards/update/'+_this5.props.match.params.id,scorecard).then(function(res){return console.log(res.data);}).catch(function(error){console.log(error);});});//can only update user statistics if a user account exists\nif(this.state.userAccount!=null){var new_best=this.state.userAccount.best_score;var new_worst=this.state.userAccount.worst_score;var score=round_score-this.state.par;if(score<this.state.userAccount.best_score){new_best=score;}if(score>this.state.userAccount.worst_score){new_worst=score;}var user={username:this.state.userAccount.username,rounds_played:this.state.userAccount.rounds_played,best_score:new_best,worst_score:new_worst};console.log(user);//update the user object in the database\naxios.post('https://birdie-tracker.herokuapp.com/users/update/'+this.state.userAccount._id,user).then(function(res){return console.log(res.data);}).catch(function(error){console.log(error);});}//redirect the user back to the scorecard list page\nwindow.location='https://dreamy-mcnulty-8d46e1.netlify.app/scorecardlist';}},{key:\"render\",value:function render(){var _this6=this;return/*#__PURE__*/_jsxs(\"div\",{className:\"scorecard_elements\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"profile_header\",children:/*#__PURE__*/_jsx(\"h3\",{children:\"Edit Scorecard\"})}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:this.onSubmit,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Course: \"}),/*#__PURE__*/_jsx(\"select\",{ref:\"userInput\",required:true,className:\"form-control\",value:this.state.course,onChange:this.onChangeCourse,children:this.state.courses.map(function(course){return/*#__PURE__*/_jsx(\"option\",{value:course.name,children:course.name},course.name);})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Date: \"}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(DatePicker,{selected:this.state.date,onChange:this.onChangeDate})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"score_boxes\",children:this.state.scores.map(function(score,idx){return/*#__PURE__*/_jsxs(\"div\",{className:\"score\",children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"Hole \",idx+1,\" score: \"]}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:score.par,onChange:_this6.onChangeScores(idx)})})]},score._id);})}),/*#__PURE__*/_jsx(\"div\",{className:\"form-group\",children:/*#__PURE__*/_jsx(\"input\",{type:\"submit\",value:\"Submit Changes\",className:\"btn btn-primary\"})})]})]});}}]);return EditScorecard;}(Component);//export withAuth0 to allow use of user's username for the scorecard\nexport default withAuth0(EditScorecard);","map":{"version":3,"sources":["C:/Users/djnin/Web Dev Projects/BirdieTracker v3/frontend/src/components/edit-scorecards.component.js"],"names":["React","Component","DatePicker","axios","withAuth0","EditScorecard","props","onChangeScores","idx","e","newScores","state","scores","map","score","sidx","par","target","value","setState","onChangeCourse","bind","onChangeDate","onSubmit","updateScores","isAuthenticated","auth0","username","course","date","Date","users","courses","isAuth","userAccount","get","then","response","data","length","matched","i","console","log","match","params","id","catch","error","name","holes","preventDefault","round_score","parseInt","scorecard","post","res","new_best","best_score","new_worst","worst_score","user","rounds_played","_id","window","location"],"mappings":"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","sourcesContent":["import React, { Component} from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport axios from 'axios';\r\nimport { withAuth0 } from '@auth0/auth0-react';\r\n\r\nclass EditScorecard extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onChangeCourse = this.onChangeCourse.bind(this);\r\n        this.onChangeDate = this.onChangeDate.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.updateScores = this.updateScores.bind(this);\r\n        this.onChangeScores = this.onChangeScores.bind(this);\r\n\r\n        const {isAuthenticated } = this.props.auth0;\r\n\r\n        this.state = {\r\n          username: '',\r\n          course: '',\r\n          score: 0,\r\n          par: 0,\r\n          scores: [],\r\n          date: new Date(),\r\n          users: [],\r\n          courses: [],\r\n          isAuth: isAuthenticated,\r\n          userAccount: null,\r\n        }\r\n    }\r\n    \r\n    componentDidMount() {\r\n\r\n      //user must be logged in or else we will be adding blank user objects\r\n      if (this.state.isAuth) {\r\n\r\n        //load in user data \r\n        axios.get('https://birdie-tracker.herokuapp.com/users/')\r\n        .then(response => {\r\n          if (response.data.length > 0) {\r\n\r\n            let matched = false;\r\n            //search through the users and find the one associated with our logged in user\r\n            for (let i = 0; i < response.data.length; i++) {\r\n              if (response.data[i].username == this.state.username) {\r\n                  console.log(\"Match found\");\r\n\r\n                  //once correct user is found, save their info in the state to be used later\r\n                  //when updating the user object. \r\n                  this.setState(state => ({\r\n                    ...state,\r\n                    userAccount: response.data[i],\r\n                  }))\r\n                  matched = true;\r\n                  break;\r\n              }\r\n            }\r\n          }\r\n        })\r\n\r\n       //load in scorecard data from selected scorecard\r\n        axios.get('https://birdie-tracker.herokuapp.com/scorecards/'+this.props.match.params.id)\r\n        .then(response => {\r\n            this.setState({\r\n                username: response.data.username,\r\n                course: response.data.course,\r\n                score: response.data.score,\r\n                scores: response.data.scores,\r\n                date: new Date(response.data.date),\r\n                par: response.data.par,\r\n            })\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n        })\r\n\r\n        //load in course data for dropdown select\r\n        axios.get('https://birdie-tracker.herokuapp.com/courses/')\r\n        .then(response => {\r\n          if (response.data.length > 0) {\r\n            this.setState(state => ({...state,\r\n              courses: response.data,\r\n            }), () => {\r\n              //callback function to ensure state is updated before elements are rendered\r\n            })\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n\r\n    //loops through the courses array to find the one the user selected\r\n    //then updates the state with the corresponding values for scores and par\r\n    //so that the form elements for the individual scores can be rendered\r\n    updateScores() {\r\n      //set the number of holes based on which course is selected\r\n      for (let i = 0; i < this.state.courses.length; i++) {\r\n        if (this.state.courses[i].name == this.state.course) {\r\n          this.setState(state=> ({...state, \r\n            scores: this.state.courses[i].holes,\r\n            par: this.state.courses[i].par}), () => {\r\n            //callback function to ensure state is updated before elements are rendered\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    //triggered by the user changing the score for an individual hole\r\n    onChangeScores = idx => e => {\r\n      const newScores = this.state.scores.map((score, sidx) => {\r\n          if (idx !== sidx) return score;\r\n          return {...score, par: e.target.value };\r\n      });\r\n\r\n      this.setState(state => ({...state, scores: newScores}), () => {\r\n        //callback function to ensure state is updated before elements are rendered\r\n      });\r\n  }\r\n\r\n    //triggered by the user changing the course in the select field\r\n    //calls updateScores() method to re-render the holes for the newly selected course\r\n    onChangeCourse(e) {\r\n      this.setState(state => ({...state, course: e.target.value}), () => {\r\n        this.updateScores();\r\n      })\r\n  }\r\n\r\n    //triggered by the user changing the date value in the select field\r\n    onChangeDate(date) {\r\n        this.setState({\r\n            date: date\r\n        })\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        //calculate the total score based on the individual holes\r\n        let round_score = 0;\r\n        for (let i = 0; i < this.state.scores.length; i++) {\r\n          round_score = round_score + parseInt(this.state.scores[i].par);\r\n        }\r\n\r\n        //set the score in the stat and wait to post the new\r\n        //scorecard until the state is updated by using\r\n        //callback function\r\n        this.setState(state => ({...state, score: round_score}), () => {\r\n        \r\n          const scorecard = {\r\n            username: this.state.username,\r\n            course: this.state.course,\r\n            score: this.state.score,\r\n            date: this.state.date,\r\n            scores: this.state.scores,\r\n            par: this.state.par\r\n          }\r\n\r\n          //save the updated scorecard to the database\r\n          axios.post('https://birdie-tracker.herokuapp.com/scorecards/update/'+this.props.match.params.id, scorecard)\r\n          .then(res => console.log(res.data))\r\n          .catch((error) => {\r\n            console.log(error);\r\n          })\r\n        \r\n        })\r\n\r\n        //can only update user statistics if a user account exists\r\n        if (this.state.userAccount != null) {\r\n\r\n          let new_best = this.state.userAccount.best_score;\r\n          let new_worst = this.state.userAccount.worst_score;\r\n          let score = round_score - this.state.par;\r\n          if ( score < this.state.userAccount.best_score) {\r\n            new_best = score;\r\n          }\r\n          if ( score > this.state.userAccount.worst_score) {\r\n            new_worst = score;\r\n          }\r\n          \r\n\r\n          const user = {\r\n            username: this.state.userAccount.username,\r\n            rounds_played: this.state.userAccount.rounds_played,\r\n            best_score: new_best,\r\n            worst_score: new_worst,\r\n          }\r\n  \r\n          console.log(user);\r\n          \r\n          //update the user object in the database\r\n          axios.post('https://birdie-tracker.herokuapp.com/users/update/'+this.state.userAccount._id, user)\r\n          .then(res => console.log(res.data))\r\n          .catch((error) => {\r\n            console.log(error);\r\n          })\r\n\r\n        }\r\n\r\n        //redirect the user back to the scorecard list page\r\n        window.location = 'https://dreamy-mcnulty-8d46e1.netlify.app/scorecardlist';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n          <div className = \"scorecard_elements\">\r\n\r\n          <div className =\"profile_header\">\r\n              <h3>Edit Scorecard</h3>\r\n          </div>\r\n\r\n          <form onSubmit={this.onSubmit}>\r\n\r\n            <div className=\"form-group\"> \r\n              <label>Course: </label>\r\n              <select ref=\"userInput\"\r\n                  required\r\n                  className=\"form-control\"\r\n                  value={this.state.course}\r\n                  onChange={this.onChangeCourse}>\r\n                  {\r\n                    this.state.courses.map(function(course) {\r\n                      return <option \r\n                        key={course.name}\r\n                        value={course.name}>{course.name}\r\n                        </option>;\r\n                    })\r\n                  }\r\n              </select>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label>Date: </label>\r\n              <div>\r\n                <DatePicker\r\n                  selected={this.state.date}\r\n                  onChange={this.onChangeDate}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"score_boxes\">\r\n              {this.state.scores.map((score, idx) => (\r\n                  <div className=\"score\" key={score._id}>\r\n                    <label>Hole {idx + 1} score: </label>\r\n                      <div>\r\n                        <input\r\n                            type=\"number\"\r\n                            value={score.par}\r\n                            onChange={this.onChangeScores(idx)}\r\n                        />\r\n                      </div>\r\n                  </div>\r\n              ))}\r\n            </div>\r\n    \r\n            <div className=\"form-group\">\r\n              <input type=\"submit\" value=\"Submit Changes\" className=\"btn btn-primary\" />\r\n            </div>\r\n          </form>\r\n        </div>\r\n        )\r\n      }\r\n}\r\n\r\n//export withAuth0 to allow use of user's username for the scorecard\r\nexport default withAuth0(EditScorecard);"]},"metadata":{},"sourceType":"module"}