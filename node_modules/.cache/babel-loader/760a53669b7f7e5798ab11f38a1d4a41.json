{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\djnin\\\\Web Dev Projects\\\\BirdieTracker\\\\BirdieTracker\\\\frontend\\\\src\\\\components\\\\create-scorecard.component.js\";\nimport React, { Component } from 'react';\nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class CreateScorecard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onChangeScores = idx => e => {\n      const newScores = this.state.scores.map((score, sidx) => {\n        if (idx !== sidx) return score;\n        return { ...score,\n          par: e.target.value\n        };\n      });\n      this.setState({\n        scores: newScores\n      });\n    };\n\n    this.onChangeUsername = this.onChangeUsername.bind(this);\n    this.onChangeCourse = this.onChangeCourse.bind(this);\n    this.onChangeScore = this.onChangeScore.bind(this);\n    this.onChangeDate = this.onChangeDate.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.updateScores = this.updateScores.bind(this);\n    this.onChangeScores = this.onChangeScores.bind(this);\n    this.calculateTotalScore = this.calculateTotalScore.bind(this);\n    this.state = {\n      username: '',\n      course: '',\n      score: 0,\n      numHoles: 0,\n      scores: [],\n      date: new Date(),\n      users: [],\n      courses: []\n    };\n  }\n\n  componentDidMount() {\n    //load in user data for dropdown select\n    axios.get('http://localhost:5000/users/').then(response => {\n      if (response.data.length > 0) {\n        this.setState({\n          users: response.data.map(user => user.username),\n          username: response.data[0].username\n        });\n      }\n    }); //load in course data for dropdown select\n\n    axios.get('http://localhost:5000/courses/').then(response => {\n      if (response.data.length > 0) {\n        this.setState(state => ({ ...state,\n          courses: response.data,\n          course: response.data[0].name,\n          numHoles: response.data[0].holes.length,\n          scores: response.data[0].holes\n        }), () => {//callback function to ensure state is updated before elements are rendered\n        });\n      }\n    });\n  }\n\n  onChangeUsername(e) {\n    this.setState({\n      username: e.target.value\n    });\n  } //loops through the courses array to find the one the user selected\n  //then updates the state with the corresponding values for numHoles\n  //as well as copying the holes array into the scores array\n  //so that the form elements for the individual scores can be rendered\n  //NOTE: numHoles doesn't really need to be updated, just used for testing purposes\n\n\n  updateScores() {\n    //set the number of holes based on which course is selected\n    for (let i = 0; i < this.state.courses.length; i++) {\n      if (this.state.courses[i].name == this.state.course) {\n        this.setState(state => ({ ...state,\n          numHoles: this.state.courses[i].holes.length,\n          scores: this.state.courses[i].holes\n        }), () => {//callback function to ensure state is updated before elements are rendered\n        });\n      }\n    }\n  }\n\n  onChangeCourse(e) {\n    this.setState(state => ({ ...state,\n      course: e.target.value\n    }), () => {\n      this.updateScores();\n    });\n  }\n\n  onChangeScore(e) {\n    this.setState({\n      score: e.target.value\n    });\n  }\n\n  onChangeDate(date) {\n    this.setState({\n      date: date\n    });\n  }\n\n  calculateTotalScore() {\n    let temp = 0;\n\n    for (let i = 0; i < this.state.numHoles; i++) {\n      temp = temp + this.state.scores[i].par;\n    }\n\n    this.setState(state => ({ ...state,\n      score: temp\n    }), () => {});\n  }\n\n  onSubmit(e) {\n    e.preventDefault(); //this.calculateTotalScore();\n\n    const scorecard = {\n      username: this.state.username,\n      course: this.state.course,\n      score: this.state.score,\n      date: this.state.date,\n      scores: this.state.scores\n    };\n    console.log(scorecard);\n    axios.post('http://localhost:5000/scorecards/add', scorecard).then(res => console.log(res.data));\n    window.location = '/scorecardlist';\n  }\n\n  render() {\n    const numHoles = this.state.numHoles;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Create New Scorecard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.onSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Username: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            ref: \"userInput\",\n            required: true,\n            className: \"form-control\",\n            value: this.state.username,\n            onChange: this.onChangeUsername,\n            children: this.state.users.map(function (user) {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: user,\n                children: user\n              }, user, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 30\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Course: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            ref: \"userInput\",\n            required: true,\n            className: \"form-control\",\n            value: this.state.course,\n            onChange: this.onChangeCourse,\n            children: this.state.courses.map(function (course) {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: course.name,\n                children: course.name\n              }, course.name, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 30\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Date: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(DatePicker, {\n              selected: this.state.date,\n              onChange: this.onChangeDate\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 13\n        }, this), this.state.scores.map((score, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"score\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Hole \", idx + 1, \" score: \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: score.par,\n              onChange: this.onChangeScores(idx)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 21\n          }, this)]\n        }, score._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 17\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            value: \"Create Scorecard\",\n            className: \"btn btn-primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Number of holes for current course: \", numHoles]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/djnin/Web Dev Projects/BirdieTracker/BirdieTracker/frontend/src/components/create-scorecard.component.js"],"names":["React","Component","DatePicker","axios","CreateScorecard","constructor","props","onChangeScores","idx","e","newScores","state","scores","map","score","sidx","par","target","value","setState","onChangeUsername","bind","onChangeCourse","onChangeScore","onChangeDate","onSubmit","updateScores","calculateTotalScore","username","course","numHoles","date","Date","users","courses","componentDidMount","get","then","response","data","length","user","name","holes","i","temp","preventDefault","scorecard","console","log","post","res","window","location","render","_id"],"mappings":"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","sourcesContent":["import React, { Component} from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport axios from 'axios';\r\n\r\nexport default class CreateScorecard extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onChangeUsername = this.onChangeUsername.bind(this);\r\n        this.onChangeCourse = this.onChangeCourse.bind(this);\r\n        this.onChangeScore = this.onChangeScore.bind(this);\r\n        this.onChangeDate = this.onChangeDate.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.updateScores = this.updateScores.bind(this);\r\n        this.onChangeScores = this.onChangeScores.bind(this);\r\n        this.calculateTotalScore = this.calculateTotalScore.bind(this);\r\n\r\n        this.state = {\r\n            username: '',\r\n            course: '',\r\n            score: 0,\r\n            numHoles: 0,\r\n            scores: [],\r\n            date: new Date(),\r\n            users: [],\r\n            courses: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        //load in user data for dropdown select\r\n        axios.get('http://localhost:5000/users/')\r\n        .then(response => {\r\n          if (response.data.length > 0) {\r\n            this.setState({\r\n              users: response.data.map(user => user.username),\r\n              username: response.data[0].username\r\n            })\r\n          }\r\n        })\r\n\r\n        //load in course data for dropdown select\r\n        axios.get('http://localhost:5000/courses/')\r\n        .then(response => {\r\n          if (response.data.length > 0) {\r\n            this.setState(state => ({...state,\r\n              courses: response.data,\r\n              course: response.data[0].name,\r\n              numHoles: response.data[0].holes.length,\r\n              scores: response.data[0].holes\r\n            }), () => {\r\n              //callback function to ensure state is updated before elements are rendered\r\n            })\r\n          }\r\n        })\r\n    }\r\n\r\n    onChangeUsername(e) {\r\n        this.setState({\r\n            username: e.target.value\r\n        })\r\n    }\r\n\r\n    //loops through the courses array to find the one the user selected\r\n    //then updates the state with the corresponding values for numHoles\r\n    //as well as copying the holes array into the scores array\r\n    //so that the form elements for the individual scores can be rendered\r\n    //NOTE: numHoles doesn't really need to be updated, just used for testing purposes\r\n    updateScores() {\r\n      //set the number of holes based on which course is selected\r\n      for (let i = 0; i < this.state.courses.length; i++) {\r\n        if (this.state.courses[i].name == this.state.course) {\r\n          this.setState(state=> ({...state, numHoles: this.state.courses[i].holes.length, scores: this.state.courses[i].holes}), () => {\r\n            //callback function to ensure state is updated before elements are rendered\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    onChangeScores = idx => e => {\r\n      const newScores = this.state.scores.map((score, sidx) => {\r\n          if (idx !== sidx) return score;\r\n          return {...score, par: e.target.value };\r\n      });\r\n\r\n      this.setState({scores: newScores});\r\n  }\r\n\r\n    onChangeCourse(e) {\r\n        this.setState(state => ({...state, course: e.target.value}), () => {\r\n          this.updateScores();\r\n        })\r\n    }\r\n\r\n    onChangeScore(e) {\r\n        this.setState({\r\n            score: e.target.value\r\n        })\r\n    }\r\n\r\n    onChangeDate(date) {\r\n        this.setState({\r\n            date: date\r\n        })\r\n    }\r\n\r\n    calculateTotalScore() {\r\n      let temp = 0;\r\n      for (let i = 0; i < this.state.numHoles; i++) {\r\n        temp = temp + this.state.scores[i].par;\r\n      }\r\n\r\n      this.setState(state => ({...state, score: temp}), () => {\r\n\r\n      })\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        //this.calculateTotalScore();\r\n\r\n        const scorecard = {\r\n            username: this.state.username,\r\n            course: this.state.course,\r\n            score: this.state.score,\r\n            date: this.state.date,\r\n            scores: this.state.scores\r\n        }\r\n\r\n        console.log(scorecard);\r\n\r\n        axios.post('http://localhost:5000/scorecards/add', scorecard)\r\n        .then(res => console.log(res.data));\r\n\r\n        window.location = '/scorecardlist';\r\n    }\r\n\r\n    render() {\r\n      \r\n      const numHoles = this.state.numHoles;\r\n\r\n        return (\r\n        <div>\r\n          <h3>Create New Scorecard</h3>\r\n          <form onSubmit={this.onSubmit}>\r\n            <div className=\"form-group\"> \r\n              <label>Username: </label>\r\n              <select ref=\"userInput\"\r\n                  required\r\n                  className=\"form-control\"\r\n                  value={this.state.username}\r\n                  onChange={this.onChangeUsername}>\r\n                  {\r\n                    this.state.users.map(function(user) {\r\n                      return <option \r\n                        key={user}\r\n                        value={user}>{user}\r\n                        </option>;\r\n                    })\r\n                  }\r\n              </select>\r\n            </div>\r\n\r\n            <div className=\"form-group\"> \r\n              <label>Course: </label>\r\n              <select ref=\"userInput\"\r\n                  required\r\n                  className=\"form-control\"\r\n                  value={this.state.course}\r\n                  onChange={this.onChangeCourse}>\r\n                  {\r\n                    this.state.courses.map(function(course) {\r\n                      return <option \r\n                        key={course.name}\r\n                        value={course.name}>{course.name}\r\n                        </option>;\r\n                    })\r\n                  }\r\n              </select>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label>Date: </label>\r\n              <div>\r\n                <DatePicker\r\n                  selected={this.state.date}\r\n                  onChange={this.onChangeDate}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            {this.state.scores.map((score, idx) => (\r\n                <div className=\"score\" key={score._id}>\r\n                  <label>Hole {idx + 1} score: </label>\r\n                    <div>\r\n                      <input\r\n                          type=\"number\"\r\n                          value={score.par}\r\n                          onChange={this.onChangeScores(idx)}\r\n                      />\r\n                    </div>\r\n                </div>\r\n            ))}\r\n    \r\n            <div className=\"form-group\">\r\n              <input type=\"submit\" value=\"Create Scorecard\" className=\"btn btn-primary\" />\r\n            </div>\r\n          </form>\r\n\r\n          <div>\r\n            <p>Number of holes for current course: {numHoles}</p>\r\n          </div>\r\n\r\n        </div>\r\n        )\r\n      }\r\n}"]},"metadata":{},"sourceType":"module"}